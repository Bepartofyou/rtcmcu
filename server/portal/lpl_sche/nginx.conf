#@version $Id$

user  nobody;
worker_processes  1;

error_log  /opt/logs/lpl_sche/error.log warn;
#error_log  logs/error.log debug;

events {
    worker_connections  10240;
}


http {
    access_log /opt/logs/lpl_sche/access.log;
    include       mime.types;
    default_type  text/plain;

    sendfile        on;
    keepalive_timeout  1;
    server_tokens  off;

    proxy_buffers 16 64k;
    client_max_body_size 1m;
    client_body_buffer_size 1m;
    lua_code_cache on;

    lua_package_path '$prefix/conf/?.lua';
    init_by_lua '
        IS_IN_TEST_ENV = false
        PORTAL_SERVER = "10.105.20.66"
        PORTAL_PORT = 9090

        REPORT_SERVER_IP = "10.106.20.22"
        REPORT_SERVER_PORT = 2112

        local conf_path = "/opt/interlive/nginx/conf"
        lpl_co = require "common"
        lreporter = require "lreporter"
        lpl_sche = require "lpl_sche"
        cjson = require "cjson"
        if not lpl_sche.load_all(conf_path) then
            ngx.log(ngx.ERR, "cannot load sche ini file.")
            -- just to abort nginx by undefined LUA function
            labort_nginx_abcDFI()
        end
';

    #limit_req_zone $binary_remote_addr zone=one:10m rate=1000r/s;
    server {

        listen       80;
        server_name  localhost;

        location /crossdomain.xml {
            add_header Cache-Control no-store;
            content_by_lua '
            local xml_str = [==[
<?xml version="1.0" encoding="UTF-8"?>
<cross-domain-policy>
  <allow-access-from domain="*.youku.com" secure="true"/>
  <allow-access-from domain="*.laifeng.com" secure="true"/>
  <allow-access-from domain="*.xingmeng.com" secure="true"/>
  <allow-access-from domain="*" secure="true"/>
</cross-domain-policy>
]==]
        ngx.say(xml_str)
';

        }

        location /v1/ss {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi.lua;
        }

        location /v1/ms {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi.lua;
        }

        location /v1/ms.m3u8 {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi.lua;
        }

        location /v2/ss {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi.lua;
        }

        location /v3/ss {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi.lua;
        }

        location /v1/rs {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi.lua;
        }

        location ~* ^/live/flv/v1/(.*).flv$ {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi_new.lua;
        }

        location ~* ^/live/f/v1/(.*)$ {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi_new.lua;
        }

        location ~* ^/live/hls/v1/(.*).m3u8$ {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi_new.lua;
        }

        location ~* ^/live/h/v1/(.*)$ {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi_new.lua;
        }

        location ~* ^/download/sdp/(.*)$ {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi_new.lua;
        }

        location ~* ^/live/flvfrag/serverinfo$ {
            #limit_req zone=one burst=2000;
            content_by_lua_file conf/lget_pi.lua;
        }

        location ~* ^/rule/(flv|flv_audio_only|hls)/(default|alias|stream|region|isp|operator)/(update|get|del)$ {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            content_by_lua_file conf/rule.lua;
        }
    }
}
