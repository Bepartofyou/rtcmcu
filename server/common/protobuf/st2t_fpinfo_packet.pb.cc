// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st2t_fpinfo_packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st2t_fpinfo_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class st2t_fpinfo_packet_forward_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<st2t_fpinfo_packet_forward_info> {
} _st2t_fpinfo_packet_forward_info_default_instance_;
class st2t_fpinfo_packetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<st2t_fpinfo_packet> {
} _st2t_fpinfo_packet_default_instance_;

namespace protobuf_st2t_5ffpinfo_5fpacket_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, asn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, topo_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet_forward_info, private_ip_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(st2t_fpinfo_packet, fi_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(st2t_fpinfo_packet_forward_info)},
  { 18, 23, sizeof(st2t_fpinfo_packet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_st2t_fpinfo_packet_forward_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_st2t_fpinfo_packet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "st2t_fpinfo_packet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _st2t_fpinfo_packet_forward_info_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _st2t_fpinfo_packet_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _st2t_fpinfo_packet_forward_info_default_instance_.DefaultConstruct();
  _st2t_fpinfo_packet_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030st2t_fpinfo_packet.proto\"\305\001\n\022st2t_fpin"
      "fo_packet\022,\n\002fi\030\001 \003(\0132 .st2t_fpinfo_pack"
      "et.forward_info\032\200\001\n\014forward_info\022\n\n\002ip\030\001"
      " \001(\r\022\014\n\004port\030\002 \001(\r\022\013\n\003asn\030\003 \001(\r\022\016\n\006regio"
      "n\030\004 \001(\r\022\022\n\ntopo_level\030\005 \001(\r\022\021\n\tpublic_ip"
      "\030\006 \003(\r\022\022\n\nprivate_ip\030\007 \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st2t_fpinfo_packet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_st2t_5ffpinfo_5fpacket_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int st2t_fpinfo_packet_forward_info::kIpFieldNumber;
const int st2t_fpinfo_packet_forward_info::kPortFieldNumber;
const int st2t_fpinfo_packet_forward_info::kAsnFieldNumber;
const int st2t_fpinfo_packet_forward_info::kRegionFieldNumber;
const int st2t_fpinfo_packet_forward_info::kTopoLevelFieldNumber;
const int st2t_fpinfo_packet_forward_info::kPublicIpFieldNumber;
const int st2t_fpinfo_packet_forward_info::kPrivateIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

st2t_fpinfo_packet_forward_info::st2t_fpinfo_packet_forward_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_st2t_5ffpinfo_5fpacket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:st2t_fpinfo_packet.forward_info)
}
st2t_fpinfo_packet_forward_info::st2t_fpinfo_packet_forward_info(const st2t_fpinfo_packet_forward_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      public_ip_(from.public_ip_),
      private_ip_(from.private_ip_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&topo_level_) -
    reinterpret_cast<char*>(&ip_) + sizeof(topo_level_));
  // @@protoc_insertion_point(copy_constructor:st2t_fpinfo_packet.forward_info)
}

void st2t_fpinfo_packet_forward_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, reinterpret_cast<char*>(&topo_level_) -
    reinterpret_cast<char*>(&ip_) + sizeof(topo_level_));
}

st2t_fpinfo_packet_forward_info::~st2t_fpinfo_packet_forward_info() {
  // @@protoc_insertion_point(destructor:st2t_fpinfo_packet.forward_info)
  SharedDtor();
}

void st2t_fpinfo_packet_forward_info::SharedDtor() {
}

void st2t_fpinfo_packet_forward_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* st2t_fpinfo_packet_forward_info::descriptor() {
  protobuf_st2t_5ffpinfo_5fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_st2t_5ffpinfo_5fpacket_2eproto::file_level_metadata[0].descriptor;
}

const st2t_fpinfo_packet_forward_info& st2t_fpinfo_packet_forward_info::default_instance() {
  protobuf_st2t_5ffpinfo_5fpacket_2eproto::InitDefaults();
  return *internal_default_instance();
}

st2t_fpinfo_packet_forward_info* st2t_fpinfo_packet_forward_info::New(::google::protobuf::Arena* arena) const {
  st2t_fpinfo_packet_forward_info* n = new st2t_fpinfo_packet_forward_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void st2t_fpinfo_packet_forward_info::Clear() {
// @@protoc_insertion_point(message_clear_start:st2t_fpinfo_packet.forward_info)
  public_ip_.Clear();
  private_ip_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&ip_, 0, reinterpret_cast<char*>(&topo_level_) -
      reinterpret_cast<char*>(&ip_) + sizeof(topo_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool st2t_fpinfo_packet_forward_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:st2t_fpinfo_packet.forward_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16u) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 asn = 3;
      case 3: {
        if (tag == 24u) {
          set_has_asn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region = 4;
      case 4: {
        if (tag == 32u) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 topo_level = 5;
      case 5: {
        if (tag == 40u) {
          set_has_topo_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &topo_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 public_ip = 6;
      case 6: {
        if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_public_ip())));
        } else if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_public_ip())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 private_ip = 7;
      case 7: {
        if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_private_ip())));
        } else if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_private_ip())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:st2t_fpinfo_packet.forward_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:st2t_fpinfo_packet.forward_info)
  return false;
#undef DO_
}

void st2t_fpinfo_packet_forward_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:st2t_fpinfo_packet.forward_info)
  // optional uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional uint32 asn = 3;
  if (has_asn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->asn(), output);
  }

  // optional uint32 region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region(), output);
  }

  // optional uint32 topo_level = 5;
  if (has_topo_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->topo_level(), output);
  }

  // repeated uint32 public_ip = 6;
  for (int i = 0; i < this->public_ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->public_ip(i), output);
  }

  // repeated uint32 private_ip = 7;
  for (int i = 0; i < this->private_ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->private_ip(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:st2t_fpinfo_packet.forward_info)
}

::google::protobuf::uint8* st2t_fpinfo_packet_forward_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:st2t_fpinfo_packet.forward_info)
  // optional uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional uint32 asn = 3;
  if (has_asn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->asn(), target);
  }

  // optional uint32 region = 4;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region(), target);
  }

  // optional uint32 topo_level = 5;
  if (has_topo_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->topo_level(), target);
  }

  // repeated uint32 public_ip = 6;
  for (int i = 0; i < this->public_ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->public_ip(i), target);
  }

  // repeated uint32 private_ip = 7;
  for (int i = 0; i < this->private_ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->private_ip(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:st2t_fpinfo_packet.forward_info)
  return target;
}

size_t st2t_fpinfo_packet_forward_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:st2t_fpinfo_packet.forward_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 public_ip = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->public_ip_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->public_ip_size());
    total_size += data_size;
  }

  // repeated uint32 private_ip = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->private_ip_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->private_ip_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 asn = 3;
    if (has_asn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asn());
    }

    // optional uint32 region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional uint32 topo_level = 5;
    if (has_topo_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->topo_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void st2t_fpinfo_packet_forward_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:st2t_fpinfo_packet.forward_info)
  GOOGLE_DCHECK_NE(&from, this);
  const st2t_fpinfo_packet_forward_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const st2t_fpinfo_packet_forward_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:st2t_fpinfo_packet.forward_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:st2t_fpinfo_packet.forward_info)
    MergeFrom(*source);
  }
}

void st2t_fpinfo_packet_forward_info::MergeFrom(const st2t_fpinfo_packet_forward_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:st2t_fpinfo_packet.forward_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_ip_.MergeFrom(from.public_ip_);
  private_ip_.MergeFrom(from.private_ip_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_asn()) {
      set_asn(from.asn());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_topo_level()) {
      set_topo_level(from.topo_level());
    }
  }
}

void st2t_fpinfo_packet_forward_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:st2t_fpinfo_packet.forward_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void st2t_fpinfo_packet_forward_info::CopyFrom(const st2t_fpinfo_packet_forward_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:st2t_fpinfo_packet.forward_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool st2t_fpinfo_packet_forward_info::IsInitialized() const {
  return true;
}

void st2t_fpinfo_packet_forward_info::Swap(st2t_fpinfo_packet_forward_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void st2t_fpinfo_packet_forward_info::InternalSwap(st2t_fpinfo_packet_forward_info* other) {
  public_ip_.UnsafeArenaSwap(&other->public_ip_);
  private_ip_.UnsafeArenaSwap(&other->private_ip_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(asn_, other->asn_);
  std::swap(region_, other->region_);
  std::swap(topo_level_, other->topo_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata st2t_fpinfo_packet_forward_info::GetMetadata() const {
  protobuf_st2t_5ffpinfo_5fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_st2t_5ffpinfo_5fpacket_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// st2t_fpinfo_packet_forward_info

// optional uint32 ip = 1;
bool st2t_fpinfo_packet_forward_info::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void st2t_fpinfo_packet_forward_info::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void st2t_fpinfo_packet_forward_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void st2t_fpinfo_packet_forward_info::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 st2t_fpinfo_packet_forward_info::ip() const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.forward_info.ip)
  return ip_;
}
void st2t_fpinfo_packet_forward_info::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:st2t_fpinfo_packet.forward_info.ip)
}

// optional uint32 port = 2;
bool st2t_fpinfo_packet_forward_info::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void st2t_fpinfo_packet_forward_info::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void st2t_fpinfo_packet_forward_info::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void st2t_fpinfo_packet_forward_info::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 st2t_fpinfo_packet_forward_info::port() const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.forward_info.port)
  return port_;
}
void st2t_fpinfo_packet_forward_info::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:st2t_fpinfo_packet.forward_info.port)
}

// optional uint32 asn = 3;
bool st2t_fpinfo_packet_forward_info::has_asn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void st2t_fpinfo_packet_forward_info::set_has_asn() {
  _has_bits_[0] |= 0x00000004u;
}
void st2t_fpinfo_packet_forward_info::clear_has_asn() {
  _has_bits_[0] &= ~0x00000004u;
}
void st2t_fpinfo_packet_forward_info::clear_asn() {
  asn_ = 0u;
  clear_has_asn();
}
::google::protobuf::uint32 st2t_fpinfo_packet_forward_info::asn() const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.forward_info.asn)
  return asn_;
}
void st2t_fpinfo_packet_forward_info::set_asn(::google::protobuf::uint32 value) {
  set_has_asn();
  asn_ = value;
  // @@protoc_insertion_point(field_set:st2t_fpinfo_packet.forward_info.asn)
}

// optional uint32 region = 4;
bool st2t_fpinfo_packet_forward_info::has_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void st2t_fpinfo_packet_forward_info::set_has_region() {
  _has_bits_[0] |= 0x00000008u;
}
void st2t_fpinfo_packet_forward_info::clear_has_region() {
  _has_bits_[0] &= ~0x00000008u;
}
void st2t_fpinfo_packet_forward_info::clear_region() {
  region_ = 0u;
  clear_has_region();
}
::google::protobuf::uint32 st2t_fpinfo_packet_forward_info::region() const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.forward_info.region)
  return region_;
}
void st2t_fpinfo_packet_forward_info::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:st2t_fpinfo_packet.forward_info.region)
}

// optional uint32 topo_level = 5;
bool st2t_fpinfo_packet_forward_info::has_topo_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void st2t_fpinfo_packet_forward_info::set_has_topo_level() {
  _has_bits_[0] |= 0x00000010u;
}
void st2t_fpinfo_packet_forward_info::clear_has_topo_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void st2t_fpinfo_packet_forward_info::clear_topo_level() {
  topo_level_ = 0u;
  clear_has_topo_level();
}
::google::protobuf::uint32 st2t_fpinfo_packet_forward_info::topo_level() const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.forward_info.topo_level)
  return topo_level_;
}
void st2t_fpinfo_packet_forward_info::set_topo_level(::google::protobuf::uint32 value) {
  set_has_topo_level();
  topo_level_ = value;
  // @@protoc_insertion_point(field_set:st2t_fpinfo_packet.forward_info.topo_level)
}

// repeated uint32 public_ip = 6;
int st2t_fpinfo_packet_forward_info::public_ip_size() const {
  return public_ip_.size();
}
void st2t_fpinfo_packet_forward_info::clear_public_ip() {
  public_ip_.Clear();
}
::google::protobuf::uint32 st2t_fpinfo_packet_forward_info::public_ip(int index) const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.forward_info.public_ip)
  return public_ip_.Get(index);
}
void st2t_fpinfo_packet_forward_info::set_public_ip(int index, ::google::protobuf::uint32 value) {
  public_ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:st2t_fpinfo_packet.forward_info.public_ip)
}
void st2t_fpinfo_packet_forward_info::add_public_ip(::google::protobuf::uint32 value) {
  public_ip_.Add(value);
  // @@protoc_insertion_point(field_add:st2t_fpinfo_packet.forward_info.public_ip)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
st2t_fpinfo_packet_forward_info::public_ip() const {
  // @@protoc_insertion_point(field_list:st2t_fpinfo_packet.forward_info.public_ip)
  return public_ip_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
st2t_fpinfo_packet_forward_info::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable_list:st2t_fpinfo_packet.forward_info.public_ip)
  return &public_ip_;
}

// repeated uint32 private_ip = 7;
int st2t_fpinfo_packet_forward_info::private_ip_size() const {
  return private_ip_.size();
}
void st2t_fpinfo_packet_forward_info::clear_private_ip() {
  private_ip_.Clear();
}
::google::protobuf::uint32 st2t_fpinfo_packet_forward_info::private_ip(int index) const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.forward_info.private_ip)
  return private_ip_.Get(index);
}
void st2t_fpinfo_packet_forward_info::set_private_ip(int index, ::google::protobuf::uint32 value) {
  private_ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:st2t_fpinfo_packet.forward_info.private_ip)
}
void st2t_fpinfo_packet_forward_info::add_private_ip(::google::protobuf::uint32 value) {
  private_ip_.Add(value);
  // @@protoc_insertion_point(field_add:st2t_fpinfo_packet.forward_info.private_ip)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
st2t_fpinfo_packet_forward_info::private_ip() const {
  // @@protoc_insertion_point(field_list:st2t_fpinfo_packet.forward_info.private_ip)
  return private_ip_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
st2t_fpinfo_packet_forward_info::mutable_private_ip() {
  // @@protoc_insertion_point(field_mutable_list:st2t_fpinfo_packet.forward_info.private_ip)
  return &private_ip_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int st2t_fpinfo_packet::kFiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

st2t_fpinfo_packet::st2t_fpinfo_packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_st2t_5ffpinfo_5fpacket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:st2t_fpinfo_packet)
}
st2t_fpinfo_packet::st2t_fpinfo_packet(const st2t_fpinfo_packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fi_(from.fi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:st2t_fpinfo_packet)
}

void st2t_fpinfo_packet::SharedCtor() {
  _cached_size_ = 0;
}

st2t_fpinfo_packet::~st2t_fpinfo_packet() {
  // @@protoc_insertion_point(destructor:st2t_fpinfo_packet)
  SharedDtor();
}

void st2t_fpinfo_packet::SharedDtor() {
}

void st2t_fpinfo_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* st2t_fpinfo_packet::descriptor() {
  protobuf_st2t_5ffpinfo_5fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_st2t_5ffpinfo_5fpacket_2eproto::file_level_metadata[1].descriptor;
}

const st2t_fpinfo_packet& st2t_fpinfo_packet::default_instance() {
  protobuf_st2t_5ffpinfo_5fpacket_2eproto::InitDefaults();
  return *internal_default_instance();
}

st2t_fpinfo_packet* st2t_fpinfo_packet::New(::google::protobuf::Arena* arena) const {
  st2t_fpinfo_packet* n = new st2t_fpinfo_packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void st2t_fpinfo_packet::Clear() {
// @@protoc_insertion_point(message_clear_start:st2t_fpinfo_packet)
  fi_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool st2t_fpinfo_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:st2t_fpinfo_packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .st2t_fpinfo_packet.forward_info fi = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fi()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:st2t_fpinfo_packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:st2t_fpinfo_packet)
  return false;
#undef DO_
}

void st2t_fpinfo_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:st2t_fpinfo_packet)
  // repeated .st2t_fpinfo_packet.forward_info fi = 1;
  for (unsigned int i = 0, n = this->fi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fi(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:st2t_fpinfo_packet)
}

::google::protobuf::uint8* st2t_fpinfo_packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:st2t_fpinfo_packet)
  // repeated .st2t_fpinfo_packet.forward_info fi = 1;
  for (unsigned int i = 0, n = this->fi_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fi(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:st2t_fpinfo_packet)
  return target;
}

size_t st2t_fpinfo_packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:st2t_fpinfo_packet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .st2t_fpinfo_packet.forward_info fi = 1;
  {
    unsigned int count = this->fi_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fi(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void st2t_fpinfo_packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:st2t_fpinfo_packet)
  GOOGLE_DCHECK_NE(&from, this);
  const st2t_fpinfo_packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const st2t_fpinfo_packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:st2t_fpinfo_packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:st2t_fpinfo_packet)
    MergeFrom(*source);
  }
}

void st2t_fpinfo_packet::MergeFrom(const st2t_fpinfo_packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:st2t_fpinfo_packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fi_.MergeFrom(from.fi_);
}

void st2t_fpinfo_packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:st2t_fpinfo_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void st2t_fpinfo_packet::CopyFrom(const st2t_fpinfo_packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:st2t_fpinfo_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool st2t_fpinfo_packet::IsInitialized() const {
  return true;
}

void st2t_fpinfo_packet::Swap(st2t_fpinfo_packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void st2t_fpinfo_packet::InternalSwap(st2t_fpinfo_packet* other) {
  fi_.UnsafeArenaSwap(&other->fi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata st2t_fpinfo_packet::GetMetadata() const {
  protobuf_st2t_5ffpinfo_5fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_st2t_5ffpinfo_5fpacket_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// st2t_fpinfo_packet

// repeated .st2t_fpinfo_packet.forward_info fi = 1;
int st2t_fpinfo_packet::fi_size() const {
  return fi_.size();
}
void st2t_fpinfo_packet::clear_fi() {
  fi_.Clear();
}
const ::st2t_fpinfo_packet_forward_info& st2t_fpinfo_packet::fi(int index) const {
  // @@protoc_insertion_point(field_get:st2t_fpinfo_packet.fi)
  return fi_.Get(index);
}
::st2t_fpinfo_packet_forward_info* st2t_fpinfo_packet::mutable_fi(int index) {
  // @@protoc_insertion_point(field_mutable:st2t_fpinfo_packet.fi)
  return fi_.Mutable(index);
}
::st2t_fpinfo_packet_forward_info* st2t_fpinfo_packet::add_fi() {
  // @@protoc_insertion_point(field_add:st2t_fpinfo_packet.fi)
  return fi_.Add();
}
::google::protobuf::RepeatedPtrField< ::st2t_fpinfo_packet_forward_info >*
st2t_fpinfo_packet::mutable_fi() {
  // @@protoc_insertion_point(field_mutable_list:st2t_fpinfo_packet.fi)
  return &fi_;
}
const ::google::protobuf::RepeatedPtrField< ::st2t_fpinfo_packet_forward_info >&
st2t_fpinfo_packet::fi() const {
  // @@protoc_insertion_point(field_list:st2t_fpinfo_packet.fi)
  return fi_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
