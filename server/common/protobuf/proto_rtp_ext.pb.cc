// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_rtp_ext.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_rtp_ext.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace live_stream_sdk {
class RtpU2rExtensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RtpU2rExtension> {
} _RtpU2rExtension_default_instance_;
class RtpD2pExtensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RtpD2pExtension> {
} _RtpD2pExtension_default_instance_;

namespace protobuf_proto_5frtp_5fext_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpU2rExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpU2rExtension, deviceid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpD2pExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpD2pExtension, deviceid_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RtpU2rExtension)},
  { 5, -1, sizeof(RtpD2pExtension)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RtpU2rExtension_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RtpD2pExtension_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto_rtp_ext.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _RtpU2rExtension_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RtpD2pExtension_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RtpU2rExtension_default_instance_.DefaultConstruct();
  _RtpD2pExtension_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023proto_rtp_ext.proto\022\017live_stream_sdk\"#"
      "\n\017RtpU2rExtension\022\020\n\010deviceID\030\001 \001(\t\"#\n\017R"
      "tpD2pExtension\022\020\n\010deviceID\030\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_rtp_ext.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_5frtp_5fext_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpU2rExtension::kDeviceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtpU2rExtension::RtpU2rExtension()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_5frtp_5fext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:live_stream_sdk.RtpU2rExtension)
}
RtpU2rExtension::RtpU2rExtension(const RtpU2rExtension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  // @@protoc_insertion_point(copy_constructor:live_stream_sdk.RtpU2rExtension)
}

void RtpU2rExtension::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RtpU2rExtension::~RtpU2rExtension() {
  // @@protoc_insertion_point(destructor:live_stream_sdk.RtpU2rExtension)
  SharedDtor();
}

void RtpU2rExtension::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RtpU2rExtension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtpU2rExtension::descriptor() {
  protobuf_proto_5frtp_5fext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5frtp_5fext_2eproto::file_level_metadata[0].descriptor;
}

const RtpU2rExtension& RtpU2rExtension::default_instance() {
  protobuf_proto_5frtp_5fext_2eproto::InitDefaults();
  return *internal_default_instance();
}

RtpU2rExtension* RtpU2rExtension::New(::google::protobuf::Arena* arena) const {
  RtpU2rExtension* n = new RtpU2rExtension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtpU2rExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:live_stream_sdk.RtpU2rExtension)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RtpU2rExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:live_stream_sdk.RtpU2rExtension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string deviceID = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "live_stream_sdk.RtpU2rExtension.deviceID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:live_stream_sdk.RtpU2rExtension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:live_stream_sdk.RtpU2rExtension)
  return false;
#undef DO_
}

void RtpU2rExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:live_stream_sdk.RtpU2rExtension)
  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "live_stream_sdk.RtpU2rExtension.deviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:live_stream_sdk.RtpU2rExtension)
}

::google::protobuf::uint8* RtpU2rExtension::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:live_stream_sdk.RtpU2rExtension)
  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "live_stream_sdk.RtpU2rExtension.deviceID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:live_stream_sdk.RtpU2rExtension)
  return target;
}

size_t RtpU2rExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:live_stream_sdk.RtpU2rExtension)
  size_t total_size = 0;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtpU2rExtension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:live_stream_sdk.RtpU2rExtension)
  GOOGLE_DCHECK_NE(&from, this);
  const RtpU2rExtension* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RtpU2rExtension>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:live_stream_sdk.RtpU2rExtension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:live_stream_sdk.RtpU2rExtension)
    MergeFrom(*source);
  }
}

void RtpU2rExtension::MergeFrom(const RtpU2rExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:live_stream_sdk.RtpU2rExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
}

void RtpU2rExtension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:live_stream_sdk.RtpU2rExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtpU2rExtension::CopyFrom(const RtpU2rExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:live_stream_sdk.RtpU2rExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpU2rExtension::IsInitialized() const {
  return true;
}

void RtpU2rExtension::Swap(RtpU2rExtension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtpU2rExtension::InternalSwap(RtpU2rExtension* other) {
  deviceid_.Swap(&other->deviceid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtpU2rExtension::GetMetadata() const {
  protobuf_proto_5frtp_5fext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5frtp_5fext_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtpU2rExtension

// string deviceID = 1;
void RtpU2rExtension::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RtpU2rExtension::deviceid() const {
  // @@protoc_insertion_point(field_get:live_stream_sdk.RtpU2rExtension.deviceID)
  return deviceid_.GetNoArena();
}
void RtpU2rExtension::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:live_stream_sdk.RtpU2rExtension.deviceID)
}
#if LANG_CXX11
void RtpU2rExtension::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:live_stream_sdk.RtpU2rExtension.deviceID)
}
#endif
void RtpU2rExtension::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:live_stream_sdk.RtpU2rExtension.deviceID)
}
void RtpU2rExtension::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:live_stream_sdk.RtpU2rExtension.deviceID)
}
::std::string* RtpU2rExtension::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:live_stream_sdk.RtpU2rExtension.deviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RtpU2rExtension::release_deviceid() {
  // @@protoc_insertion_point(field_release:live_stream_sdk.RtpU2rExtension.deviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RtpU2rExtension::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:live_stream_sdk.RtpU2rExtension.deviceID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpD2pExtension::kDeviceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtpD2pExtension::RtpD2pExtension()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_5frtp_5fext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:live_stream_sdk.RtpD2pExtension)
}
RtpD2pExtension::RtpD2pExtension(const RtpD2pExtension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  // @@protoc_insertion_point(copy_constructor:live_stream_sdk.RtpD2pExtension)
}

void RtpD2pExtension::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RtpD2pExtension::~RtpD2pExtension() {
  // @@protoc_insertion_point(destructor:live_stream_sdk.RtpD2pExtension)
  SharedDtor();
}

void RtpD2pExtension::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RtpD2pExtension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtpD2pExtension::descriptor() {
  protobuf_proto_5frtp_5fext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5frtp_5fext_2eproto::file_level_metadata[1].descriptor;
}

const RtpD2pExtension& RtpD2pExtension::default_instance() {
  protobuf_proto_5frtp_5fext_2eproto::InitDefaults();
  return *internal_default_instance();
}

RtpD2pExtension* RtpD2pExtension::New(::google::protobuf::Arena* arena) const {
  RtpD2pExtension* n = new RtpD2pExtension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtpD2pExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:live_stream_sdk.RtpD2pExtension)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RtpD2pExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:live_stream_sdk.RtpD2pExtension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string deviceID = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "live_stream_sdk.RtpD2pExtension.deviceID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:live_stream_sdk.RtpD2pExtension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:live_stream_sdk.RtpD2pExtension)
  return false;
#undef DO_
}

void RtpD2pExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:live_stream_sdk.RtpD2pExtension)
  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "live_stream_sdk.RtpD2pExtension.deviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:live_stream_sdk.RtpD2pExtension)
}

::google::protobuf::uint8* RtpD2pExtension::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:live_stream_sdk.RtpD2pExtension)
  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "live_stream_sdk.RtpD2pExtension.deviceID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:live_stream_sdk.RtpD2pExtension)
  return target;
}

size_t RtpD2pExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:live_stream_sdk.RtpD2pExtension)
  size_t total_size = 0;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtpD2pExtension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:live_stream_sdk.RtpD2pExtension)
  GOOGLE_DCHECK_NE(&from, this);
  const RtpD2pExtension* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RtpD2pExtension>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:live_stream_sdk.RtpD2pExtension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:live_stream_sdk.RtpD2pExtension)
    MergeFrom(*source);
  }
}

void RtpD2pExtension::MergeFrom(const RtpD2pExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:live_stream_sdk.RtpD2pExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
}

void RtpD2pExtension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:live_stream_sdk.RtpD2pExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtpD2pExtension::CopyFrom(const RtpD2pExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:live_stream_sdk.RtpD2pExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpD2pExtension::IsInitialized() const {
  return true;
}

void RtpD2pExtension::Swap(RtpD2pExtension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtpD2pExtension::InternalSwap(RtpD2pExtension* other) {
  deviceid_.Swap(&other->deviceid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtpD2pExtension::GetMetadata() const {
  protobuf_proto_5frtp_5fext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5frtp_5fext_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtpD2pExtension

// string deviceID = 1;
void RtpD2pExtension::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RtpD2pExtension::deviceid() const {
  // @@protoc_insertion_point(field_get:live_stream_sdk.RtpD2pExtension.deviceID)
  return deviceid_.GetNoArena();
}
void RtpD2pExtension::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:live_stream_sdk.RtpD2pExtension.deviceID)
}
#if LANG_CXX11
void RtpD2pExtension::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:live_stream_sdk.RtpD2pExtension.deviceID)
}
#endif
void RtpD2pExtension::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:live_stream_sdk.RtpD2pExtension.deviceID)
}
void RtpD2pExtension::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:live_stream_sdk.RtpD2pExtension.deviceID)
}
::std::string* RtpD2pExtension::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:live_stream_sdk.RtpD2pExtension.deviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RtpD2pExtension::release_deviceid() {
  // @@protoc_insertion_point(field_release:live_stream_sdk.RtpD2pExtension.deviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RtpD2pExtension::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:live_stream_sdk.RtpD2pExtension.deviceID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace live_stream_sdk

// @@protoc_insertion_point(global_scope)
