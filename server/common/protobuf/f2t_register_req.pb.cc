// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: f2t_register_req.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "f2t_register_req.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class f2t_register_req_v4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<f2t_register_req_v4> {
} _f2t_register_req_v4_default_instance_;

namespace protobuf_f2t_5fregister_5freq_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, asn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, backend_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, private_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, uploader_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, rtp_backend_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, rtp_player_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, rtp_uploader_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2t_register_req_v4, transport_type_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(f2t_register_req_v4)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_f2t_register_req_v4_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "f2t_register_req.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _f2t_register_req_v4_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _f2t_register_req_v4_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026f2t_register_req.proto\"\247\002\n\023f2t_registe"
      "r_req_v4\022\n\n\002ip\030\001 \001(\r\022\013\n\003asn\030\002 \001(\r\022\016\n\006reg"
      "ion\030\003 \001(\r\022\024\n\014backend_port\030\004 \001(\r\022\023\n\013playe"
      "r_port\030\005 \001(\r\022\021\n\tpublic_ip\030\006 \003(\r\022\022\n\npriva"
      "te_ip\030\007 \003(\r\022\025\n\ruploader_port\030\010 \001(\r\022\030\n\020rt"
      "p_backend_port\030\t \001(\r\022\027\n\017rtp_player_port\030"
      "\n \001(\r\022\031\n\021rtp_uploader_port\030\013 \001(\r\0220\n\016tran"
      "sport_type\030\014 \001(\0162\030.LCdnStreamTransportTy"
      "pe*Q\n\027LCdnStreamTransportType\022\032\n\026LCdnStr"
      "eamTransportFlv\020\001\022\032\n\026LCdnStreamTransport"
      "Rtp\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "f2t_register_req.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_f2t_5fregister_5freq_2eproto

const ::google::protobuf::EnumDescriptor* LCdnStreamTransportType_descriptor() {
  protobuf_f2t_5fregister_5freq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_f2t_5fregister_5freq_2eproto::file_level_enum_descriptors[0];
}
bool LCdnStreamTransportType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int f2t_register_req_v4::kIpFieldNumber;
const int f2t_register_req_v4::kAsnFieldNumber;
const int f2t_register_req_v4::kRegionFieldNumber;
const int f2t_register_req_v4::kBackendPortFieldNumber;
const int f2t_register_req_v4::kPlayerPortFieldNumber;
const int f2t_register_req_v4::kPublicIpFieldNumber;
const int f2t_register_req_v4::kPrivateIpFieldNumber;
const int f2t_register_req_v4::kUploaderPortFieldNumber;
const int f2t_register_req_v4::kRtpBackendPortFieldNumber;
const int f2t_register_req_v4::kRtpPlayerPortFieldNumber;
const int f2t_register_req_v4::kRtpUploaderPortFieldNumber;
const int f2t_register_req_v4::kTransportTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

f2t_register_req_v4::f2t_register_req_v4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_f2t_5fregister_5freq_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:f2t_register_req_v4)
}
f2t_register_req_v4::f2t_register_req_v4(const f2t_register_req_v4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      public_ip_(from.public_ip_),
      private_ip_(from.private_ip_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&transport_type_) -
    reinterpret_cast<char*>(&ip_) + sizeof(transport_type_));
  // @@protoc_insertion_point(copy_constructor:f2t_register_req_v4)
}

void f2t_register_req_v4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, reinterpret_cast<char*>(&rtp_uploader_port_) -
    reinterpret_cast<char*>(&ip_) + sizeof(rtp_uploader_port_));
  transport_type_ = 1;
}

f2t_register_req_v4::~f2t_register_req_v4() {
  // @@protoc_insertion_point(destructor:f2t_register_req_v4)
  SharedDtor();
}

void f2t_register_req_v4::SharedDtor() {
}

void f2t_register_req_v4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* f2t_register_req_v4::descriptor() {
  protobuf_f2t_5fregister_5freq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_f2t_5fregister_5freq_2eproto::file_level_metadata[0].descriptor;
}

const f2t_register_req_v4& f2t_register_req_v4::default_instance() {
  protobuf_f2t_5fregister_5freq_2eproto::InitDefaults();
  return *internal_default_instance();
}

f2t_register_req_v4* f2t_register_req_v4::New(::google::protobuf::Arena* arena) const {
  f2t_register_req_v4* n = new f2t_register_req_v4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void f2t_register_req_v4::Clear() {
// @@protoc_insertion_point(message_clear_start:f2t_register_req_v4)
  public_ip_.Clear();
  private_ip_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ip_, 0, reinterpret_cast<char*>(&rtp_player_port_) -
      reinterpret_cast<char*>(&ip_) + sizeof(rtp_player_port_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    rtp_uploader_port_ = 0u;
    transport_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool f2t_register_req_v4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f2t_register_req_v4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 asn = 2;
      case 2: {
        if (tag == 16u) {
          set_has_asn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region = 3;
      case 3: {
        if (tag == 24u) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 backend_port = 4;
      case 4: {
        if (tag == 32u) {
          set_has_backend_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backend_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_port = 5;
      case 5: {
        if (tag == 40u) {
          set_has_player_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 public_ip = 6;
      case 6: {
        if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_public_ip())));
        } else if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_public_ip())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 private_ip = 7;
      case 7: {
        if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_private_ip())));
        } else if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_private_ip())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uploader_port = 8;
      case 8: {
        if (tag == 64u) {
          set_has_uploader_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uploader_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtp_backend_port = 9;
      case 9: {
        if (tag == 72u) {
          set_has_rtp_backend_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtp_backend_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtp_player_port = 10;
      case 10: {
        if (tag == 80u) {
          set_has_rtp_player_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtp_player_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtp_uploader_port = 11;
      case 11: {
        if (tag == 88u) {
          set_has_rtp_uploader_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtp_uploader_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LCdnStreamTransportType transport_type = 12;
      case 12: {
        if (tag == 96u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LCdnStreamTransportType_IsValid(value)) {
            set_transport_type(static_cast< ::LCdnStreamTransportType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f2t_register_req_v4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f2t_register_req_v4)
  return false;
#undef DO_
}

void f2t_register_req_v4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f2t_register_req_v4)
  // optional uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional uint32 asn = 2;
  if (has_asn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->asn(), output);
  }

  // optional uint32 region = 3;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region(), output);
  }

  // optional uint32 backend_port = 4;
  if (has_backend_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->backend_port(), output);
  }

  // optional uint32 player_port = 5;
  if (has_player_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_port(), output);
  }

  // repeated uint32 public_ip = 6;
  for (int i = 0; i < this->public_ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->public_ip(i), output);
  }

  // repeated uint32 private_ip = 7;
  for (int i = 0; i < this->private_ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->private_ip(i), output);
  }

  // optional uint32 uploader_port = 8;
  if (has_uploader_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uploader_port(), output);
  }

  // optional uint32 rtp_backend_port = 9;
  if (has_rtp_backend_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rtp_backend_port(), output);
  }

  // optional uint32 rtp_player_port = 10;
  if (has_rtp_player_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rtp_player_port(), output);
  }

  // optional uint32 rtp_uploader_port = 11;
  if (has_rtp_uploader_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rtp_uploader_port(), output);
  }

  // optional .LCdnStreamTransportType transport_type = 12;
  if (has_transport_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->transport_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f2t_register_req_v4)
}

::google::protobuf::uint8* f2t_register_req_v4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:f2t_register_req_v4)
  // optional uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional uint32 asn = 2;
  if (has_asn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->asn(), target);
  }

  // optional uint32 region = 3;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region(), target);
  }

  // optional uint32 backend_port = 4;
  if (has_backend_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->backend_port(), target);
  }

  // optional uint32 player_port = 5;
  if (has_player_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_port(), target);
  }

  // repeated uint32 public_ip = 6;
  for (int i = 0; i < this->public_ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->public_ip(i), target);
  }

  // repeated uint32 private_ip = 7;
  for (int i = 0; i < this->private_ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->private_ip(i), target);
  }

  // optional uint32 uploader_port = 8;
  if (has_uploader_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uploader_port(), target);
  }

  // optional uint32 rtp_backend_port = 9;
  if (has_rtp_backend_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rtp_backend_port(), target);
  }

  // optional uint32 rtp_player_port = 10;
  if (has_rtp_player_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rtp_player_port(), target);
  }

  // optional uint32 rtp_uploader_port = 11;
  if (has_rtp_uploader_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rtp_uploader_port(), target);
  }

  // optional .LCdnStreamTransportType transport_type = 12;
  if (has_transport_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->transport_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f2t_register_req_v4)
  return target;
}

size_t f2t_register_req_v4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f2t_register_req_v4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 public_ip = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->public_ip_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->public_ip_size());
    total_size += data_size;
  }

  // repeated uint32 private_ip = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->private_ip_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->private_ip_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 asn = 2;
    if (has_asn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asn());
    }

    // optional uint32 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional uint32 backend_port = 4;
    if (has_backend_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backend_port());
    }

    // optional uint32 player_port = 5;
    if (has_player_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_port());
    }

    // optional uint32 uploader_port = 8;
    if (has_uploader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uploader_port());
    }

    // optional uint32 rtp_backend_port = 9;
    if (has_rtp_backend_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtp_backend_port());
    }

    // optional uint32 rtp_player_port = 10;
    if (has_rtp_player_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtp_player_port());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 rtp_uploader_port = 11;
    if (has_rtp_uploader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtp_uploader_port());
    }

    // optional .LCdnStreamTransportType transport_type = 12;
    if (has_transport_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transport_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void f2t_register_req_v4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f2t_register_req_v4)
  GOOGLE_DCHECK_NE(&from, this);
  const f2t_register_req_v4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const f2t_register_req_v4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f2t_register_req_v4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f2t_register_req_v4)
    MergeFrom(*source);
  }
}

void f2t_register_req_v4::MergeFrom(const f2t_register_req_v4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f2t_register_req_v4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_ip_.MergeFrom(from.public_ip_);
  private_ip_.MergeFrom(from.private_ip_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_asn()) {
      set_asn(from.asn());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_backend_port()) {
      set_backend_port(from.backend_port());
    }
    if (from.has_player_port()) {
      set_player_port(from.player_port());
    }
    if (from.has_uploader_port()) {
      set_uploader_port(from.uploader_port());
    }
    if (from.has_rtp_backend_port()) {
      set_rtp_backend_port(from.rtp_backend_port());
    }
    if (from.has_rtp_player_port()) {
      set_rtp_player_port(from.rtp_player_port());
    }
  }
  if (from._has_bits_[8 / 32] & 768u) {
    if (from.has_rtp_uploader_port()) {
      set_rtp_uploader_port(from.rtp_uploader_port());
    }
    if (from.has_transport_type()) {
      set_transport_type(from.transport_type());
    }
  }
}

void f2t_register_req_v4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f2t_register_req_v4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void f2t_register_req_v4::CopyFrom(const f2t_register_req_v4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f2t_register_req_v4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool f2t_register_req_v4::IsInitialized() const {
  return true;
}

void f2t_register_req_v4::Swap(f2t_register_req_v4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void f2t_register_req_v4::InternalSwap(f2t_register_req_v4* other) {
  public_ip_.UnsafeArenaSwap(&other->public_ip_);
  private_ip_.UnsafeArenaSwap(&other->private_ip_);
  std::swap(ip_, other->ip_);
  std::swap(asn_, other->asn_);
  std::swap(region_, other->region_);
  std::swap(backend_port_, other->backend_port_);
  std::swap(player_port_, other->player_port_);
  std::swap(uploader_port_, other->uploader_port_);
  std::swap(rtp_backend_port_, other->rtp_backend_port_);
  std::swap(rtp_player_port_, other->rtp_player_port_);
  std::swap(rtp_uploader_port_, other->rtp_uploader_port_);
  std::swap(transport_type_, other->transport_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata f2t_register_req_v4::GetMetadata() const {
  protobuf_f2t_5fregister_5freq_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_f2t_5fregister_5freq_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// f2t_register_req_v4

// optional uint32 ip = 1;
bool f2t_register_req_v4::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void f2t_register_req_v4::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void f2t_register_req_v4::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void f2t_register_req_v4::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 f2t_register_req_v4::ip() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.ip)
  return ip_;
}
void f2t_register_req_v4::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.ip)
}

// optional uint32 asn = 2;
bool f2t_register_req_v4::has_asn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void f2t_register_req_v4::set_has_asn() {
  _has_bits_[0] |= 0x00000002u;
}
void f2t_register_req_v4::clear_has_asn() {
  _has_bits_[0] &= ~0x00000002u;
}
void f2t_register_req_v4::clear_asn() {
  asn_ = 0u;
  clear_has_asn();
}
::google::protobuf::uint32 f2t_register_req_v4::asn() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.asn)
  return asn_;
}
void f2t_register_req_v4::set_asn(::google::protobuf::uint32 value) {
  set_has_asn();
  asn_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.asn)
}

// optional uint32 region = 3;
bool f2t_register_req_v4::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void f2t_register_req_v4::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
void f2t_register_req_v4::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
void f2t_register_req_v4::clear_region() {
  region_ = 0u;
  clear_has_region();
}
::google::protobuf::uint32 f2t_register_req_v4::region() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.region)
  return region_;
}
void f2t_register_req_v4::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.region)
}

// optional uint32 backend_port = 4;
bool f2t_register_req_v4::has_backend_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void f2t_register_req_v4::set_has_backend_port() {
  _has_bits_[0] |= 0x00000008u;
}
void f2t_register_req_v4::clear_has_backend_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void f2t_register_req_v4::clear_backend_port() {
  backend_port_ = 0u;
  clear_has_backend_port();
}
::google::protobuf::uint32 f2t_register_req_v4::backend_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.backend_port)
  return backend_port_;
}
void f2t_register_req_v4::set_backend_port(::google::protobuf::uint32 value) {
  set_has_backend_port();
  backend_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.backend_port)
}

// optional uint32 player_port = 5;
bool f2t_register_req_v4::has_player_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void f2t_register_req_v4::set_has_player_port() {
  _has_bits_[0] |= 0x00000010u;
}
void f2t_register_req_v4::clear_has_player_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void f2t_register_req_v4::clear_player_port() {
  player_port_ = 0u;
  clear_has_player_port();
}
::google::protobuf::uint32 f2t_register_req_v4::player_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.player_port)
  return player_port_;
}
void f2t_register_req_v4::set_player_port(::google::protobuf::uint32 value) {
  set_has_player_port();
  player_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.player_port)
}

// repeated uint32 public_ip = 6;
int f2t_register_req_v4::public_ip_size() const {
  return public_ip_.size();
}
void f2t_register_req_v4::clear_public_ip() {
  public_ip_.Clear();
}
::google::protobuf::uint32 f2t_register_req_v4::public_ip(int index) const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.public_ip)
  return public_ip_.Get(index);
}
void f2t_register_req_v4::set_public_ip(int index, ::google::protobuf::uint32 value) {
  public_ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.public_ip)
}
void f2t_register_req_v4::add_public_ip(::google::protobuf::uint32 value) {
  public_ip_.Add(value);
  // @@protoc_insertion_point(field_add:f2t_register_req_v4.public_ip)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
f2t_register_req_v4::public_ip() const {
  // @@protoc_insertion_point(field_list:f2t_register_req_v4.public_ip)
  return public_ip_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
f2t_register_req_v4::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable_list:f2t_register_req_v4.public_ip)
  return &public_ip_;
}

// repeated uint32 private_ip = 7;
int f2t_register_req_v4::private_ip_size() const {
  return private_ip_.size();
}
void f2t_register_req_v4::clear_private_ip() {
  private_ip_.Clear();
}
::google::protobuf::uint32 f2t_register_req_v4::private_ip(int index) const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.private_ip)
  return private_ip_.Get(index);
}
void f2t_register_req_v4::set_private_ip(int index, ::google::protobuf::uint32 value) {
  private_ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.private_ip)
}
void f2t_register_req_v4::add_private_ip(::google::protobuf::uint32 value) {
  private_ip_.Add(value);
  // @@protoc_insertion_point(field_add:f2t_register_req_v4.private_ip)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
f2t_register_req_v4::private_ip() const {
  // @@protoc_insertion_point(field_list:f2t_register_req_v4.private_ip)
  return private_ip_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
f2t_register_req_v4::mutable_private_ip() {
  // @@protoc_insertion_point(field_mutable_list:f2t_register_req_v4.private_ip)
  return &private_ip_;
}

// optional uint32 uploader_port = 8;
bool f2t_register_req_v4::has_uploader_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void f2t_register_req_v4::set_has_uploader_port() {
  _has_bits_[0] |= 0x00000020u;
}
void f2t_register_req_v4::clear_has_uploader_port() {
  _has_bits_[0] &= ~0x00000020u;
}
void f2t_register_req_v4::clear_uploader_port() {
  uploader_port_ = 0u;
  clear_has_uploader_port();
}
::google::protobuf::uint32 f2t_register_req_v4::uploader_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.uploader_port)
  return uploader_port_;
}
void f2t_register_req_v4::set_uploader_port(::google::protobuf::uint32 value) {
  set_has_uploader_port();
  uploader_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.uploader_port)
}

// optional uint32 rtp_backend_port = 9;
bool f2t_register_req_v4::has_rtp_backend_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void f2t_register_req_v4::set_has_rtp_backend_port() {
  _has_bits_[0] |= 0x00000040u;
}
void f2t_register_req_v4::clear_has_rtp_backend_port() {
  _has_bits_[0] &= ~0x00000040u;
}
void f2t_register_req_v4::clear_rtp_backend_port() {
  rtp_backend_port_ = 0u;
  clear_has_rtp_backend_port();
}
::google::protobuf::uint32 f2t_register_req_v4::rtp_backend_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.rtp_backend_port)
  return rtp_backend_port_;
}
void f2t_register_req_v4::set_rtp_backend_port(::google::protobuf::uint32 value) {
  set_has_rtp_backend_port();
  rtp_backend_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.rtp_backend_port)
}

// optional uint32 rtp_player_port = 10;
bool f2t_register_req_v4::has_rtp_player_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void f2t_register_req_v4::set_has_rtp_player_port() {
  _has_bits_[0] |= 0x00000080u;
}
void f2t_register_req_v4::clear_has_rtp_player_port() {
  _has_bits_[0] &= ~0x00000080u;
}
void f2t_register_req_v4::clear_rtp_player_port() {
  rtp_player_port_ = 0u;
  clear_has_rtp_player_port();
}
::google::protobuf::uint32 f2t_register_req_v4::rtp_player_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.rtp_player_port)
  return rtp_player_port_;
}
void f2t_register_req_v4::set_rtp_player_port(::google::protobuf::uint32 value) {
  set_has_rtp_player_port();
  rtp_player_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.rtp_player_port)
}

// optional uint32 rtp_uploader_port = 11;
bool f2t_register_req_v4::has_rtp_uploader_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void f2t_register_req_v4::set_has_rtp_uploader_port() {
  _has_bits_[0] |= 0x00000100u;
}
void f2t_register_req_v4::clear_has_rtp_uploader_port() {
  _has_bits_[0] &= ~0x00000100u;
}
void f2t_register_req_v4::clear_rtp_uploader_port() {
  rtp_uploader_port_ = 0u;
  clear_has_rtp_uploader_port();
}
::google::protobuf::uint32 f2t_register_req_v4::rtp_uploader_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.rtp_uploader_port)
  return rtp_uploader_port_;
}
void f2t_register_req_v4::set_rtp_uploader_port(::google::protobuf::uint32 value) {
  set_has_rtp_uploader_port();
  rtp_uploader_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.rtp_uploader_port)
}

// optional .LCdnStreamTransportType transport_type = 12;
bool f2t_register_req_v4::has_transport_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void f2t_register_req_v4::set_has_transport_type() {
  _has_bits_[0] |= 0x00000200u;
}
void f2t_register_req_v4::clear_has_transport_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void f2t_register_req_v4::clear_transport_type() {
  transport_type_ = 1;
  clear_has_transport_type();
}
::LCdnStreamTransportType f2t_register_req_v4::transport_type() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.transport_type)
  return static_cast< ::LCdnStreamTransportType >(transport_type_);
}
void f2t_register_req_v4::set_transport_type(::LCdnStreamTransportType value) {
  assert(::LCdnStreamTransportType_IsValid(value));
  set_has_transport_type();
  transport_type_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.transport_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
