// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: f2f_rtp_packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "f2f_rtp_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class f2f_rtp_packetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<f2f_rtp_packet> {
} _f2f_rtp_packet_default_instance_;

namespace protobuf_f2f_5frtp_5fpacket_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2f_rtp_packet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2f_rtp_packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2f_rtp_packet, f2f_rtp_sid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2f_rtp_packet, f2f_rtp_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f2f_rtp_packet, f2f_rtp_param_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(f2f_rtp_packet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_f2f_rtp_packet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "f2f_rtp_packet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _f2f_rtp_packet_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _f2f_rtp_packet_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024f2f_rtp_packet.proto\"Q\n\016f2f_rtp_packet"
      "\022\023\n\013f2f_rtp_sid\030\001 \002(\t\022\023\n\013f2f_rtp_cmd\030\002 \001"
      "(\005\022\025\n\rf2f_rtp_param\030\003 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 105);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "f2f_rtp_packet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_f2f_5frtp_5fpacket_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int f2f_rtp_packet::kF2FRtpSidFieldNumber;
const int f2f_rtp_packet::kF2FRtpCmdFieldNumber;
const int f2f_rtp_packet::kF2FRtpParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

f2f_rtp_packet::f2f_rtp_packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_f2f_5frtp_5fpacket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:f2f_rtp_packet)
}
f2f_rtp_packet::f2f_rtp_packet(const f2f_rtp_packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2f_rtp_sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_f2f_rtp_sid()) {
    f2f_rtp_sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.f2f_rtp_sid_);
  }
  ::memcpy(&f2f_rtp_cmd_, &from.f2f_rtp_cmd_,
    reinterpret_cast<char*>(&f2f_rtp_param_) -
    reinterpret_cast<char*>(&f2f_rtp_cmd_) + sizeof(f2f_rtp_param_));
  // @@protoc_insertion_point(copy_constructor:f2f_rtp_packet)
}

void f2f_rtp_packet::SharedCtor() {
  _cached_size_ = 0;
  f2f_rtp_sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2f_rtp_cmd_, 0, reinterpret_cast<char*>(&f2f_rtp_param_) -
    reinterpret_cast<char*>(&f2f_rtp_cmd_) + sizeof(f2f_rtp_param_));
}

f2f_rtp_packet::~f2f_rtp_packet() {
  // @@protoc_insertion_point(destructor:f2f_rtp_packet)
  SharedDtor();
}

void f2f_rtp_packet::SharedDtor() {
  f2f_rtp_sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void f2f_rtp_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* f2f_rtp_packet::descriptor() {
  protobuf_f2f_5frtp_5fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_f2f_5frtp_5fpacket_2eproto::file_level_metadata[0].descriptor;
}

const f2f_rtp_packet& f2f_rtp_packet::default_instance() {
  protobuf_f2f_5frtp_5fpacket_2eproto::InitDefaults();
  return *internal_default_instance();
}

f2f_rtp_packet* f2f_rtp_packet::New(::google::protobuf::Arena* arena) const {
  f2f_rtp_packet* n = new f2f_rtp_packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void f2f_rtp_packet::Clear() {
// @@protoc_insertion_point(message_clear_start:f2f_rtp_packet)
  if (has_f2f_rtp_sid()) {
    GOOGLE_DCHECK(!f2f_rtp_sid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*f2f_rtp_sid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&f2f_rtp_cmd_, 0, reinterpret_cast<char*>(&f2f_rtp_param_) -
      reinterpret_cast<char*>(&f2f_rtp_cmd_) + sizeof(f2f_rtp_param_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool f2f_rtp_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f2f_rtp_packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string f2f_rtp_sid = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f2f_rtp_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f2f_rtp_sid().data(), this->f2f_rtp_sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f2f_rtp_packet.f2f_rtp_sid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 f2f_rtp_cmd = 2;
      case 2: {
        if (tag == 16u) {
          set_has_f2f_rtp_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f2f_rtp_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 f2f_rtp_param = 3;
      case 3: {
        if (tag == 24u) {
          set_has_f2f_rtp_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f2f_rtp_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f2f_rtp_packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f2f_rtp_packet)
  return false;
#undef DO_
}

void f2f_rtp_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f2f_rtp_packet)
  // required string f2f_rtp_sid = 1;
  if (has_f2f_rtp_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f2f_rtp_sid().data(), this->f2f_rtp_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f2f_rtp_packet.f2f_rtp_sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f2f_rtp_sid(), output);
  }

  // optional int32 f2f_rtp_cmd = 2;
  if (has_f2f_rtp_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f2f_rtp_cmd(), output);
  }

  // optional uint32 f2f_rtp_param = 3;
  if (has_f2f_rtp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->f2f_rtp_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f2f_rtp_packet)
}

::google::protobuf::uint8* f2f_rtp_packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:f2f_rtp_packet)
  // required string f2f_rtp_sid = 1;
  if (has_f2f_rtp_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f2f_rtp_sid().data(), this->f2f_rtp_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f2f_rtp_packet.f2f_rtp_sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f2f_rtp_sid(), target);
  }

  // optional int32 f2f_rtp_cmd = 2;
  if (has_f2f_rtp_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f2f_rtp_cmd(), target);
  }

  // optional uint32 f2f_rtp_param = 3;
  if (has_f2f_rtp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->f2f_rtp_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f2f_rtp_packet)
  return target;
}

size_t f2f_rtp_packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f2f_rtp_packet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string f2f_rtp_sid = 1;
  if (has_f2f_rtp_sid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->f2f_rtp_sid());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 f2f_rtp_cmd = 2;
    if (has_f2f_rtp_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f2f_rtp_cmd());
    }

    // optional uint32 f2f_rtp_param = 3;
    if (has_f2f_rtp_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f2f_rtp_param());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void f2f_rtp_packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f2f_rtp_packet)
  GOOGLE_DCHECK_NE(&from, this);
  const f2f_rtp_packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const f2f_rtp_packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f2f_rtp_packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f2f_rtp_packet)
    MergeFrom(*source);
  }
}

void f2f_rtp_packet::MergeFrom(const f2f_rtp_packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f2f_rtp_packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_f2f_rtp_sid()) {
      set_has_f2f_rtp_sid();
      f2f_rtp_sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.f2f_rtp_sid_);
    }
    if (from.has_f2f_rtp_cmd()) {
      set_f2f_rtp_cmd(from.f2f_rtp_cmd());
    }
    if (from.has_f2f_rtp_param()) {
      set_f2f_rtp_param(from.f2f_rtp_param());
    }
  }
}

void f2f_rtp_packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f2f_rtp_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void f2f_rtp_packet::CopyFrom(const f2f_rtp_packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f2f_rtp_packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool f2f_rtp_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void f2f_rtp_packet::Swap(f2f_rtp_packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void f2f_rtp_packet::InternalSwap(f2f_rtp_packet* other) {
  f2f_rtp_sid_.Swap(&other->f2f_rtp_sid_);
  std::swap(f2f_rtp_cmd_, other->f2f_rtp_cmd_);
  std::swap(f2f_rtp_param_, other->f2f_rtp_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata f2f_rtp_packet::GetMetadata() const {
  protobuf_f2f_5frtp_5fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_f2f_5frtp_5fpacket_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// f2f_rtp_packet

// required string f2f_rtp_sid = 1;
bool f2f_rtp_packet::has_f2f_rtp_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void f2f_rtp_packet::set_has_f2f_rtp_sid() {
  _has_bits_[0] |= 0x00000001u;
}
void f2f_rtp_packet::clear_has_f2f_rtp_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
void f2f_rtp_packet::clear_f2f_rtp_sid() {
  f2f_rtp_sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_f2f_rtp_sid();
}
const ::std::string& f2f_rtp_packet::f2f_rtp_sid() const {
  // @@protoc_insertion_point(field_get:f2f_rtp_packet.f2f_rtp_sid)
  return f2f_rtp_sid_.GetNoArena();
}
void f2f_rtp_packet::set_f2f_rtp_sid(const ::std::string& value) {
  set_has_f2f_rtp_sid();
  f2f_rtp_sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:f2f_rtp_packet.f2f_rtp_sid)
}
#if LANG_CXX11
void f2f_rtp_packet::set_f2f_rtp_sid(::std::string&& value) {
  set_has_f2f_rtp_sid();
  f2f_rtp_sid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:f2f_rtp_packet.f2f_rtp_sid)
}
#endif
void f2f_rtp_packet::set_f2f_rtp_sid(const char* value) {
  set_has_f2f_rtp_sid();
  f2f_rtp_sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:f2f_rtp_packet.f2f_rtp_sid)
}
void f2f_rtp_packet::set_f2f_rtp_sid(const char* value, size_t size) {
  set_has_f2f_rtp_sid();
  f2f_rtp_sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:f2f_rtp_packet.f2f_rtp_sid)
}
::std::string* f2f_rtp_packet::mutable_f2f_rtp_sid() {
  set_has_f2f_rtp_sid();
  // @@protoc_insertion_point(field_mutable:f2f_rtp_packet.f2f_rtp_sid)
  return f2f_rtp_sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* f2f_rtp_packet::release_f2f_rtp_sid() {
  // @@protoc_insertion_point(field_release:f2f_rtp_packet.f2f_rtp_sid)
  clear_has_f2f_rtp_sid();
  return f2f_rtp_sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void f2f_rtp_packet::set_allocated_f2f_rtp_sid(::std::string* f2f_rtp_sid) {
  if (f2f_rtp_sid != NULL) {
    set_has_f2f_rtp_sid();
  } else {
    clear_has_f2f_rtp_sid();
  }
  f2f_rtp_sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f2f_rtp_sid);
  // @@protoc_insertion_point(field_set_allocated:f2f_rtp_packet.f2f_rtp_sid)
}

// optional int32 f2f_rtp_cmd = 2;
bool f2f_rtp_packet::has_f2f_rtp_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void f2f_rtp_packet::set_has_f2f_rtp_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void f2f_rtp_packet::clear_has_f2f_rtp_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void f2f_rtp_packet::clear_f2f_rtp_cmd() {
  f2f_rtp_cmd_ = 0;
  clear_has_f2f_rtp_cmd();
}
::google::protobuf::int32 f2f_rtp_packet::f2f_rtp_cmd() const {
  // @@protoc_insertion_point(field_get:f2f_rtp_packet.f2f_rtp_cmd)
  return f2f_rtp_cmd_;
}
void f2f_rtp_packet::set_f2f_rtp_cmd(::google::protobuf::int32 value) {
  set_has_f2f_rtp_cmd();
  f2f_rtp_cmd_ = value;
  // @@protoc_insertion_point(field_set:f2f_rtp_packet.f2f_rtp_cmd)
}

// optional uint32 f2f_rtp_param = 3;
bool f2f_rtp_packet::has_f2f_rtp_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void f2f_rtp_packet::set_has_f2f_rtp_param() {
  _has_bits_[0] |= 0x00000004u;
}
void f2f_rtp_packet::clear_has_f2f_rtp_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void f2f_rtp_packet::clear_f2f_rtp_param() {
  f2f_rtp_param_ = 0u;
  clear_has_f2f_rtp_param();
}
::google::protobuf::uint32 f2f_rtp_packet::f2f_rtp_param() const {
  // @@protoc_insertion_point(field_get:f2f_rtp_packet.f2f_rtp_param)
  return f2f_rtp_param_;
}
void f2f_rtp_packet::set_f2f_rtp_param(::google::protobuf::uint32 value) {
  set_has_f2f_rtp_param();
  f2f_rtp_param_ = value;
  // @@protoc_insertion_point(field_set:f2f_rtp_packet.f2f_rtp_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
