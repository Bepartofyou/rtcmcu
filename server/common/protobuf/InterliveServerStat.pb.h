// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InterliveServerStat.proto

#ifndef PROTOBUF_InterliveServerStat_2eproto__INCLUDED
#define PROTOBUF_InterliveServerStat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class InterliveServerStat;
class InterliveServerStatDefaultTypeInternal;
extern InterliveServerStatDefaultTypeInternal _InterliveServerStat_default_instance_;

namespace protobuf_InterliveServerStat_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_InterliveServerStat_2eproto

// ===================================================================

class InterliveServerStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InterliveServerStat) */ {
 public:
  InterliveServerStat();
  virtual ~InterliveServerStat();

  InterliveServerStat(const InterliveServerStat& from);

  inline InterliveServerStat& operator=(const InterliveServerStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterliveServerStat& default_instance();

  static inline const InterliveServerStat* internal_default_instance() {
    return reinterpret_cast<const InterliveServerStat*>(
               &_InterliveServerStat_default_instance_);
  }

  void Swap(InterliveServerStat* other);

  // implements Message ----------------------------------------------

  inline InterliveServerStat* New() const PROTOBUF_FINAL { return New(NULL); }

  InterliveServerStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterliveServerStat& from);
  void MergeFrom(const InterliveServerStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterliveServerStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string proc_process_name = 13;
  bool has_proc_process_name() const;
  void clear_proc_process_name();
  static const int kProcProcessNameFieldNumber = 13;
  const ::std::string& proc_process_name() const;
  void set_proc_process_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proc_process_name(::std::string&& value);
  #endif
  void set_proc_process_name(const char* value);
  void set_proc_process_name(const char* value, size_t size);
  ::std::string* mutable_proc_process_name();
  ::std::string* release_proc_process_name();
  void set_allocated_proc_process_name(::std::string* proc_process_name);

  // optional uint64 sys_uptime = 1;
  bool has_sys_uptime() const;
  void clear_sys_uptime();
  static const int kSysUptimeFieldNumber = 1;
  ::google::protobuf::uint64 sys_uptime() const;
  void set_sys_uptime(::google::protobuf::uint64 value);

  // optional int32 sys_cpu_cores = 2;
  bool has_sys_cpu_cores() const;
  void clear_sys_cpu_cores();
  static const int kSysCpuCoresFieldNumber = 2;
  ::google::protobuf::int32 sys_cpu_cores() const;
  void set_sys_cpu_cores(::google::protobuf::int32 value);

  // optional int32 sys_cpu_idle = 3;
  bool has_sys_cpu_idle() const;
  void clear_sys_cpu_idle();
  static const int kSysCpuIdleFieldNumber = 3;
  ::google::protobuf::int32 sys_cpu_idle() const;
  void set_sys_cpu_idle(::google::protobuf::int32 value);

  // optional int32 sys_mem_total = 4;
  bool has_sys_mem_total() const;
  void clear_sys_mem_total();
  static const int kSysMemTotalFieldNumber = 4;
  ::google::protobuf::int32 sys_mem_total() const;
  void set_sys_mem_total(::google::protobuf::int32 value);

  // optional int32 sys_mem_total_free = 5;
  bool has_sys_mem_total_free() const;
  void clear_sys_mem_total_free();
  static const int kSysMemTotalFreeFieldNumber = 5;
  ::google::protobuf::int32 sys_mem_total_free() const;
  void set_sys_mem_total_free(::google::protobuf::int32 value);

  // optional uint64 sys_net_rx = 6;
  bool has_sys_net_rx() const;
  void clear_sys_net_rx();
  static const int kSysNetRxFieldNumber = 6;
  ::google::protobuf::uint64 sys_net_rx() const;
  void set_sys_net_rx(::google::protobuf::uint64 value);

  // optional uint64 sys_net_tx = 7;
  bool has_sys_net_tx() const;
  void clear_sys_net_tx();
  static const int kSysNetTxFieldNumber = 7;
  ::google::protobuf::uint64 sys_net_tx() const;
  void set_sys_net_tx(::google::protobuf::uint64 value);

  // optional int32 proc_cpu_use = 8;
  bool has_proc_cpu_use() const;
  void clear_proc_cpu_use();
  static const int kProcCpuUseFieldNumber = 8;
  ::google::protobuf::int32 proc_cpu_use() const;
  void set_proc_cpu_use(::google::protobuf::int32 value);

  // optional int32 proc_sleepavg = 9;
  bool has_proc_sleepavg() const;
  void clear_proc_sleepavg();
  static const int kProcSleepavgFieldNumber = 9;
  ::google::protobuf::int32 proc_sleepavg() const;
  void set_proc_sleepavg(::google::protobuf::int32 value);

  // optional int32 proc_vmpeak = 10;
  bool has_proc_vmpeak() const;
  void clear_proc_vmpeak();
  static const int kProcVmpeakFieldNumber = 10;
  ::google::protobuf::int32 proc_vmpeak() const;
  void set_proc_vmpeak(::google::protobuf::int32 value);

  // optional int32 proc_vmsize = 11;
  bool has_proc_vmsize() const;
  void clear_proc_vmsize();
  static const int kProcVmsizeFieldNumber = 11;
  ::google::protobuf::int32 proc_vmsize() const;
  void set_proc_vmsize(::google::protobuf::int32 value);

  // optional uint64 proc_total_uptime = 12;
  bool has_proc_total_uptime() const;
  void clear_proc_total_uptime();
  static const int kProcTotalUptimeFieldNumber = 12;
  ::google::protobuf::uint64 proc_total_uptime() const;
  void set_proc_total_uptime(::google::protobuf::uint64 value);

  // optional int32 buss_fsv2_stream_count = 14;
  bool has_buss_fsv2_stream_count() const;
  void clear_buss_fsv2_stream_count();
  static const int kBussFsv2StreamCountFieldNumber = 14;
  ::google::protobuf::int32 buss_fsv2_stream_count() const;
  void set_buss_fsv2_stream_count(::google::protobuf::int32 value);

  // optional int32 buss_fsv2_total_session = 15;
  bool has_buss_fsv2_total_session() const;
  void clear_buss_fsv2_total_session();
  static const int kBussFsv2TotalSessionFieldNumber = 15;
  ::google::protobuf::int32 buss_fsv2_total_session() const;
  void set_buss_fsv2_total_session(::google::protobuf::int32 value);

  // optional int32 buss_fsv2_active_session = 16;
  bool has_buss_fsv2_active_session() const;
  void clear_buss_fsv2_active_session();
  static const int kBussFsv2ActiveSessionFieldNumber = 16;
  ::google::protobuf::int32 buss_fsv2_active_session() const;
  void set_buss_fsv2_active_session(::google::protobuf::int32 value);

  // optional int32 buss_fsv2_connection_count = 17;
  bool has_buss_fsv2_connection_count() const;
  void clear_buss_fsv2_connection_count();
  static const int kBussFsv2ConnectionCountFieldNumber = 17;
  ::google::protobuf::int32 buss_fsv2_connection_count() const;
  void set_buss_fsv2_connection_count(::google::protobuf::int32 value);

  // optional int32 buss_fcv2_stream_count = 18;
  bool has_buss_fcv2_stream_count() const;
  void clear_buss_fcv2_stream_count();
  static const int kBussFcv2StreamCountFieldNumber = 18;
  ::google::protobuf::int32 buss_fcv2_stream_count() const;
  void set_buss_fcv2_stream_count(::google::protobuf::int32 value);

  // optional int32 buss_uploader_connection_count = 19;
  bool has_buss_uploader_connection_count() const;
  void clear_buss_uploader_connection_count();
  static const int kBussUploaderConnectionCountFieldNumber = 19;
  ::google::protobuf::int32 buss_uploader_connection_count() const;
  void set_buss_uploader_connection_count(::google::protobuf::int32 value);

  // optional int32 buss_player_connection_count = 20;
  bool has_buss_player_connection_count() const;
  void clear_buss_player_connection_count();
  static const int kBussPlayerConnectionCountFieldNumber = 20;
  ::google::protobuf::int32 buss_player_connection_count() const;
  void set_buss_player_connection_count(::google::protobuf::int32 value);

  // optional int32 buss_player_online_cnt = 21;
  bool has_buss_player_online_cnt() const;
  void clear_buss_player_online_cnt();
  static const int kBussPlayerOnlineCntFieldNumber = 21;
  ::google::protobuf::int32 buss_player_online_cnt() const;
  void set_buss_player_online_cnt(::google::protobuf::int32 value);

  // optional int32 proc_vmrss = 22;
  bool has_proc_vmrss() const;
  void clear_proc_vmrss();
  static const int kProcVmrssFieldNumber = 22;
  ::google::protobuf::int32 proc_vmrss() const;
  void set_proc_vmrss(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InterliveServerStat)
 private:
  void set_has_sys_uptime();
  void clear_has_sys_uptime();
  void set_has_sys_cpu_cores();
  void clear_has_sys_cpu_cores();
  void set_has_sys_cpu_idle();
  void clear_has_sys_cpu_idle();
  void set_has_sys_mem_total();
  void clear_has_sys_mem_total();
  void set_has_sys_mem_total_free();
  void clear_has_sys_mem_total_free();
  void set_has_sys_net_rx();
  void clear_has_sys_net_rx();
  void set_has_sys_net_tx();
  void clear_has_sys_net_tx();
  void set_has_proc_cpu_use();
  void clear_has_proc_cpu_use();
  void set_has_proc_sleepavg();
  void clear_has_proc_sleepavg();
  void set_has_proc_vmpeak();
  void clear_has_proc_vmpeak();
  void set_has_proc_vmsize();
  void clear_has_proc_vmsize();
  void set_has_proc_total_uptime();
  void clear_has_proc_total_uptime();
  void set_has_proc_process_name();
  void clear_has_proc_process_name();
  void set_has_buss_fsv2_stream_count();
  void clear_has_buss_fsv2_stream_count();
  void set_has_buss_fsv2_total_session();
  void clear_has_buss_fsv2_total_session();
  void set_has_buss_fsv2_active_session();
  void clear_has_buss_fsv2_active_session();
  void set_has_buss_fsv2_connection_count();
  void clear_has_buss_fsv2_connection_count();
  void set_has_buss_fcv2_stream_count();
  void clear_has_buss_fcv2_stream_count();
  void set_has_buss_uploader_connection_count();
  void clear_has_buss_uploader_connection_count();
  void set_has_buss_player_connection_count();
  void clear_has_buss_player_connection_count();
  void set_has_buss_player_online_cnt();
  void clear_has_buss_player_online_cnt();
  void set_has_proc_vmrss();
  void clear_has_proc_vmrss();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr proc_process_name_;
  ::google::protobuf::uint64 sys_uptime_;
  ::google::protobuf::int32 sys_cpu_cores_;
  ::google::protobuf::int32 sys_cpu_idle_;
  ::google::protobuf::int32 sys_mem_total_;
  ::google::protobuf::int32 sys_mem_total_free_;
  ::google::protobuf::uint64 sys_net_rx_;
  ::google::protobuf::uint64 sys_net_tx_;
  ::google::protobuf::int32 proc_cpu_use_;
  ::google::protobuf::int32 proc_sleepavg_;
  ::google::protobuf::int32 proc_vmpeak_;
  ::google::protobuf::int32 proc_vmsize_;
  ::google::protobuf::uint64 proc_total_uptime_;
  ::google::protobuf::int32 buss_fsv2_stream_count_;
  ::google::protobuf::int32 buss_fsv2_total_session_;
  ::google::protobuf::int32 buss_fsv2_active_session_;
  ::google::protobuf::int32 buss_fsv2_connection_count_;
  ::google::protobuf::int32 buss_fcv2_stream_count_;
  ::google::protobuf::int32 buss_uploader_connection_count_;
  ::google::protobuf::int32 buss_player_connection_count_;
  ::google::protobuf::int32 buss_player_online_cnt_;
  ::google::protobuf::int32 proc_vmrss_;
  friend struct  protobuf_InterliveServerStat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InterliveServerStat

// optional uint64 sys_uptime = 1;
inline bool InterliveServerStat::has_sys_uptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InterliveServerStat::set_has_sys_uptime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InterliveServerStat::clear_has_sys_uptime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InterliveServerStat::clear_sys_uptime() {
  sys_uptime_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_uptime();
}
inline ::google::protobuf::uint64 InterliveServerStat::sys_uptime() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_uptime)
  return sys_uptime_;
}
inline void InterliveServerStat::set_sys_uptime(::google::protobuf::uint64 value) {
  set_has_sys_uptime();
  sys_uptime_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_uptime)
}

// optional int32 sys_cpu_cores = 2;
inline bool InterliveServerStat::has_sys_cpu_cores() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InterliveServerStat::set_has_sys_cpu_cores() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InterliveServerStat::clear_has_sys_cpu_cores() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InterliveServerStat::clear_sys_cpu_cores() {
  sys_cpu_cores_ = 0;
  clear_has_sys_cpu_cores();
}
inline ::google::protobuf::int32 InterliveServerStat::sys_cpu_cores() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_cpu_cores)
  return sys_cpu_cores_;
}
inline void InterliveServerStat::set_sys_cpu_cores(::google::protobuf::int32 value) {
  set_has_sys_cpu_cores();
  sys_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_cpu_cores)
}

// optional int32 sys_cpu_idle = 3;
inline bool InterliveServerStat::has_sys_cpu_idle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InterliveServerStat::set_has_sys_cpu_idle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InterliveServerStat::clear_has_sys_cpu_idle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InterliveServerStat::clear_sys_cpu_idle() {
  sys_cpu_idle_ = 0;
  clear_has_sys_cpu_idle();
}
inline ::google::protobuf::int32 InterliveServerStat::sys_cpu_idle() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_cpu_idle)
  return sys_cpu_idle_;
}
inline void InterliveServerStat::set_sys_cpu_idle(::google::protobuf::int32 value) {
  set_has_sys_cpu_idle();
  sys_cpu_idle_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_cpu_idle)
}

// optional int32 sys_mem_total = 4;
inline bool InterliveServerStat::has_sys_mem_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InterliveServerStat::set_has_sys_mem_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InterliveServerStat::clear_has_sys_mem_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InterliveServerStat::clear_sys_mem_total() {
  sys_mem_total_ = 0;
  clear_has_sys_mem_total();
}
inline ::google::protobuf::int32 InterliveServerStat::sys_mem_total() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_mem_total)
  return sys_mem_total_;
}
inline void InterliveServerStat::set_sys_mem_total(::google::protobuf::int32 value) {
  set_has_sys_mem_total();
  sys_mem_total_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_mem_total)
}

// optional int32 sys_mem_total_free = 5;
inline bool InterliveServerStat::has_sys_mem_total_free() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InterliveServerStat::set_has_sys_mem_total_free() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InterliveServerStat::clear_has_sys_mem_total_free() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InterliveServerStat::clear_sys_mem_total_free() {
  sys_mem_total_free_ = 0;
  clear_has_sys_mem_total_free();
}
inline ::google::protobuf::int32 InterliveServerStat::sys_mem_total_free() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_mem_total_free)
  return sys_mem_total_free_;
}
inline void InterliveServerStat::set_sys_mem_total_free(::google::protobuf::int32 value) {
  set_has_sys_mem_total_free();
  sys_mem_total_free_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_mem_total_free)
}

// optional uint64 sys_net_rx = 6;
inline bool InterliveServerStat::has_sys_net_rx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InterliveServerStat::set_has_sys_net_rx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InterliveServerStat::clear_has_sys_net_rx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InterliveServerStat::clear_sys_net_rx() {
  sys_net_rx_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_net_rx();
}
inline ::google::protobuf::uint64 InterliveServerStat::sys_net_rx() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_net_rx)
  return sys_net_rx_;
}
inline void InterliveServerStat::set_sys_net_rx(::google::protobuf::uint64 value) {
  set_has_sys_net_rx();
  sys_net_rx_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_net_rx)
}

// optional uint64 sys_net_tx = 7;
inline bool InterliveServerStat::has_sys_net_tx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InterliveServerStat::set_has_sys_net_tx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InterliveServerStat::clear_has_sys_net_tx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InterliveServerStat::clear_sys_net_tx() {
  sys_net_tx_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_net_tx();
}
inline ::google::protobuf::uint64 InterliveServerStat::sys_net_tx() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_net_tx)
  return sys_net_tx_;
}
inline void InterliveServerStat::set_sys_net_tx(::google::protobuf::uint64 value) {
  set_has_sys_net_tx();
  sys_net_tx_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_net_tx)
}

// optional int32 proc_cpu_use = 8;
inline bool InterliveServerStat::has_proc_cpu_use() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InterliveServerStat::set_has_proc_cpu_use() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InterliveServerStat::clear_has_proc_cpu_use() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InterliveServerStat::clear_proc_cpu_use() {
  proc_cpu_use_ = 0;
  clear_has_proc_cpu_use();
}
inline ::google::protobuf::int32 InterliveServerStat::proc_cpu_use() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_cpu_use)
  return proc_cpu_use_;
}
inline void InterliveServerStat::set_proc_cpu_use(::google::protobuf::int32 value) {
  set_has_proc_cpu_use();
  proc_cpu_use_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_cpu_use)
}

// optional int32 proc_sleepavg = 9;
inline bool InterliveServerStat::has_proc_sleepavg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InterliveServerStat::set_has_proc_sleepavg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InterliveServerStat::clear_has_proc_sleepavg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InterliveServerStat::clear_proc_sleepavg() {
  proc_sleepavg_ = 0;
  clear_has_proc_sleepavg();
}
inline ::google::protobuf::int32 InterliveServerStat::proc_sleepavg() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_sleepavg)
  return proc_sleepavg_;
}
inline void InterliveServerStat::set_proc_sleepavg(::google::protobuf::int32 value) {
  set_has_proc_sleepavg();
  proc_sleepavg_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_sleepavg)
}

// optional int32 proc_vmpeak = 10;
inline bool InterliveServerStat::has_proc_vmpeak() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InterliveServerStat::set_has_proc_vmpeak() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InterliveServerStat::clear_has_proc_vmpeak() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InterliveServerStat::clear_proc_vmpeak() {
  proc_vmpeak_ = 0;
  clear_has_proc_vmpeak();
}
inline ::google::protobuf::int32 InterliveServerStat::proc_vmpeak() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_vmpeak)
  return proc_vmpeak_;
}
inline void InterliveServerStat::set_proc_vmpeak(::google::protobuf::int32 value) {
  set_has_proc_vmpeak();
  proc_vmpeak_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_vmpeak)
}

// optional int32 proc_vmsize = 11;
inline bool InterliveServerStat::has_proc_vmsize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InterliveServerStat::set_has_proc_vmsize() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InterliveServerStat::clear_has_proc_vmsize() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InterliveServerStat::clear_proc_vmsize() {
  proc_vmsize_ = 0;
  clear_has_proc_vmsize();
}
inline ::google::protobuf::int32 InterliveServerStat::proc_vmsize() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_vmsize)
  return proc_vmsize_;
}
inline void InterliveServerStat::set_proc_vmsize(::google::protobuf::int32 value) {
  set_has_proc_vmsize();
  proc_vmsize_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_vmsize)
}

// optional uint64 proc_total_uptime = 12;
inline bool InterliveServerStat::has_proc_total_uptime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InterliveServerStat::set_has_proc_total_uptime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InterliveServerStat::clear_has_proc_total_uptime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InterliveServerStat::clear_proc_total_uptime() {
  proc_total_uptime_ = GOOGLE_ULONGLONG(0);
  clear_has_proc_total_uptime();
}
inline ::google::protobuf::uint64 InterliveServerStat::proc_total_uptime() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_total_uptime)
  return proc_total_uptime_;
}
inline void InterliveServerStat::set_proc_total_uptime(::google::protobuf::uint64 value) {
  set_has_proc_total_uptime();
  proc_total_uptime_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_total_uptime)
}

// optional string proc_process_name = 13;
inline bool InterliveServerStat::has_proc_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterliveServerStat::set_has_proc_process_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InterliveServerStat::clear_has_proc_process_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InterliveServerStat::clear_proc_process_name() {
  proc_process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_process_name();
}
inline const ::std::string& InterliveServerStat::proc_process_name() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_process_name)
  return proc_process_name_.GetNoArena();
}
inline void InterliveServerStat::set_proc_process_name(const ::std::string& value) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_process_name)
}
#if LANG_CXX11
inline void InterliveServerStat::set_proc_process_name(::std::string&& value) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InterliveServerStat.proc_process_name)
}
#endif
inline void InterliveServerStat::set_proc_process_name(const char* value) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InterliveServerStat.proc_process_name)
}
inline void InterliveServerStat::set_proc_process_name(const char* value, size_t size) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InterliveServerStat.proc_process_name)
}
inline ::std::string* InterliveServerStat::mutable_proc_process_name() {
  set_has_proc_process_name();
  // @@protoc_insertion_point(field_mutable:InterliveServerStat.proc_process_name)
  return proc_process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InterliveServerStat::release_proc_process_name() {
  // @@protoc_insertion_point(field_release:InterliveServerStat.proc_process_name)
  clear_has_proc_process_name();
  return proc_process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InterliveServerStat::set_allocated_proc_process_name(::std::string* proc_process_name) {
  if (proc_process_name != NULL) {
    set_has_proc_process_name();
  } else {
    clear_has_proc_process_name();
  }
  proc_process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_process_name);
  // @@protoc_insertion_point(field_set_allocated:InterliveServerStat.proc_process_name)
}

// optional int32 buss_fsv2_stream_count = 14;
inline bool InterliveServerStat::has_buss_fsv2_stream_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InterliveServerStat::set_has_buss_fsv2_stream_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InterliveServerStat::clear_has_buss_fsv2_stream_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InterliveServerStat::clear_buss_fsv2_stream_count() {
  buss_fsv2_stream_count_ = 0;
  clear_has_buss_fsv2_stream_count();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_fsv2_stream_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_stream_count)
  return buss_fsv2_stream_count_;
}
inline void InterliveServerStat::set_buss_fsv2_stream_count(::google::protobuf::int32 value) {
  set_has_buss_fsv2_stream_count();
  buss_fsv2_stream_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_stream_count)
}

// optional int32 buss_fsv2_total_session = 15;
inline bool InterliveServerStat::has_buss_fsv2_total_session() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InterliveServerStat::set_has_buss_fsv2_total_session() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InterliveServerStat::clear_has_buss_fsv2_total_session() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InterliveServerStat::clear_buss_fsv2_total_session() {
  buss_fsv2_total_session_ = 0;
  clear_has_buss_fsv2_total_session();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_fsv2_total_session() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_total_session)
  return buss_fsv2_total_session_;
}
inline void InterliveServerStat::set_buss_fsv2_total_session(::google::protobuf::int32 value) {
  set_has_buss_fsv2_total_session();
  buss_fsv2_total_session_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_total_session)
}

// optional int32 buss_fsv2_active_session = 16;
inline bool InterliveServerStat::has_buss_fsv2_active_session() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InterliveServerStat::set_has_buss_fsv2_active_session() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InterliveServerStat::clear_has_buss_fsv2_active_session() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InterliveServerStat::clear_buss_fsv2_active_session() {
  buss_fsv2_active_session_ = 0;
  clear_has_buss_fsv2_active_session();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_fsv2_active_session() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_active_session)
  return buss_fsv2_active_session_;
}
inline void InterliveServerStat::set_buss_fsv2_active_session(::google::protobuf::int32 value) {
  set_has_buss_fsv2_active_session();
  buss_fsv2_active_session_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_active_session)
}

// optional int32 buss_fsv2_connection_count = 17;
inline bool InterliveServerStat::has_buss_fsv2_connection_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InterliveServerStat::set_has_buss_fsv2_connection_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void InterliveServerStat::clear_has_buss_fsv2_connection_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void InterliveServerStat::clear_buss_fsv2_connection_count() {
  buss_fsv2_connection_count_ = 0;
  clear_has_buss_fsv2_connection_count();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_fsv2_connection_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_connection_count)
  return buss_fsv2_connection_count_;
}
inline void InterliveServerStat::set_buss_fsv2_connection_count(::google::protobuf::int32 value) {
  set_has_buss_fsv2_connection_count();
  buss_fsv2_connection_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_connection_count)
}

// optional int32 buss_fcv2_stream_count = 18;
inline bool InterliveServerStat::has_buss_fcv2_stream_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InterliveServerStat::set_has_buss_fcv2_stream_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InterliveServerStat::clear_has_buss_fcv2_stream_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InterliveServerStat::clear_buss_fcv2_stream_count() {
  buss_fcv2_stream_count_ = 0;
  clear_has_buss_fcv2_stream_count();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_fcv2_stream_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fcv2_stream_count)
  return buss_fcv2_stream_count_;
}
inline void InterliveServerStat::set_buss_fcv2_stream_count(::google::protobuf::int32 value) {
  set_has_buss_fcv2_stream_count();
  buss_fcv2_stream_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fcv2_stream_count)
}

// optional int32 buss_uploader_connection_count = 19;
inline bool InterliveServerStat::has_buss_uploader_connection_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InterliveServerStat::set_has_buss_uploader_connection_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InterliveServerStat::clear_has_buss_uploader_connection_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InterliveServerStat::clear_buss_uploader_connection_count() {
  buss_uploader_connection_count_ = 0;
  clear_has_buss_uploader_connection_count();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_uploader_connection_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_uploader_connection_count)
  return buss_uploader_connection_count_;
}
inline void InterliveServerStat::set_buss_uploader_connection_count(::google::protobuf::int32 value) {
  set_has_buss_uploader_connection_count();
  buss_uploader_connection_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_uploader_connection_count)
}

// optional int32 buss_player_connection_count = 20;
inline bool InterliveServerStat::has_buss_player_connection_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void InterliveServerStat::set_has_buss_player_connection_count() {
  _has_bits_[0] |= 0x00080000u;
}
inline void InterliveServerStat::clear_has_buss_player_connection_count() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void InterliveServerStat::clear_buss_player_connection_count() {
  buss_player_connection_count_ = 0;
  clear_has_buss_player_connection_count();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_player_connection_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_player_connection_count)
  return buss_player_connection_count_;
}
inline void InterliveServerStat::set_buss_player_connection_count(::google::protobuf::int32 value) {
  set_has_buss_player_connection_count();
  buss_player_connection_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_player_connection_count)
}

// optional int32 buss_player_online_cnt = 21;
inline bool InterliveServerStat::has_buss_player_online_cnt() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void InterliveServerStat::set_has_buss_player_online_cnt() {
  _has_bits_[0] |= 0x00100000u;
}
inline void InterliveServerStat::clear_has_buss_player_online_cnt() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void InterliveServerStat::clear_buss_player_online_cnt() {
  buss_player_online_cnt_ = 0;
  clear_has_buss_player_online_cnt();
}
inline ::google::protobuf::int32 InterliveServerStat::buss_player_online_cnt() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_player_online_cnt)
  return buss_player_online_cnt_;
}
inline void InterliveServerStat::set_buss_player_online_cnt(::google::protobuf::int32 value) {
  set_has_buss_player_online_cnt();
  buss_player_online_cnt_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_player_online_cnt)
}

// optional int32 proc_vmrss = 22;
inline bool InterliveServerStat::has_proc_vmrss() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void InterliveServerStat::set_has_proc_vmrss() {
  _has_bits_[0] |= 0x00200000u;
}
inline void InterliveServerStat::clear_has_proc_vmrss() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void InterliveServerStat::clear_proc_vmrss() {
  proc_vmrss_ = 0;
  clear_has_proc_vmrss();
}
inline ::google::protobuf::int32 InterliveServerStat::proc_vmrss() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_vmrss)
  return proc_vmrss_;
}
inline void InterliveServerStat::set_proc_vmrss(::google::protobuf::int32 value) {
  set_has_proc_vmrss();
  proc_vmrss_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_vmrss)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_InterliveServerStat_2eproto__INCLUDED
