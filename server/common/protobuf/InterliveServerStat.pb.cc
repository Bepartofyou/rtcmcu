// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InterliveServerStat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InterliveServerStat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class InterliveServerStatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InterliveServerStat> {
} _InterliveServerStat_default_instance_;

namespace protobuf_InterliveServerStat_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, sys_uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, sys_cpu_cores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, sys_cpu_idle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, sys_mem_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, sys_mem_total_free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, sys_net_rx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, sys_net_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, proc_cpu_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, proc_sleepavg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, proc_vmpeak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, proc_vmsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, proc_total_uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, proc_process_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_fsv2_stream_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_fsv2_total_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_fsv2_active_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_fsv2_connection_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_fcv2_stream_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_uploader_connection_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_player_connection_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, buss_player_online_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterliveServerStat, proc_vmrss_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 26, sizeof(InterliveServerStat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InterliveServerStat_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "InterliveServerStat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _InterliveServerStat_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _InterliveServerStat_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031InterliveServerStat.proto\"\347\004\n\023Interliv"
      "eServerStat\022\022\n\nsys_uptime\030\001 \001(\004\022\025\n\rsys_c"
      "pu_cores\030\002 \001(\005\022\024\n\014sys_cpu_idle\030\003 \001(\005\022\025\n\r"
      "sys_mem_total\030\004 \001(\005\022\032\n\022sys_mem_total_fre"
      "e\030\005 \001(\005\022\022\n\nsys_net_rx\030\006 \001(\004\022\022\n\nsys_net_t"
      "x\030\007 \001(\004\022\024\n\014proc_cpu_use\030\010 \001(\005\022\025\n\rproc_sl"
      "eepavg\030\t \001(\005\022\023\n\013proc_vmpeak\030\n \001(\005\022\023\n\013pro"
      "c_vmsize\030\013 \001(\005\022\031\n\021proc_total_uptime\030\014 \001("
      "\004\022\031\n\021proc_process_name\030\r \001(\t\022\036\n\026buss_fsv"
      "2_stream_count\030\016 \001(\005\022\037\n\027buss_fsv2_total_"
      "session\030\017 \001(\005\022 \n\030buss_fsv2_active_sessio"
      "n\030\020 \001(\005\022\"\n\032buss_fsv2_connection_count\030\021 "
      "\001(\005\022\036\n\026buss_fcv2_stream_count\030\022 \001(\005\022&\n\036b"
      "uss_uploader_connection_count\030\023 \001(\005\022$\n\034b"
      "uss_player_connection_count\030\024 \001(\005\022\036\n\026bus"
      "s_player_online_cnt\030\025 \001(\005\022\022\n\nproc_vmrss\030"
      "\026 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InterliveServerStat.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_InterliveServerStat_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterliveServerStat::kSysUptimeFieldNumber;
const int InterliveServerStat::kSysCpuCoresFieldNumber;
const int InterliveServerStat::kSysCpuIdleFieldNumber;
const int InterliveServerStat::kSysMemTotalFieldNumber;
const int InterliveServerStat::kSysMemTotalFreeFieldNumber;
const int InterliveServerStat::kSysNetRxFieldNumber;
const int InterliveServerStat::kSysNetTxFieldNumber;
const int InterliveServerStat::kProcCpuUseFieldNumber;
const int InterliveServerStat::kProcSleepavgFieldNumber;
const int InterliveServerStat::kProcVmpeakFieldNumber;
const int InterliveServerStat::kProcVmsizeFieldNumber;
const int InterliveServerStat::kProcTotalUptimeFieldNumber;
const int InterliveServerStat::kProcProcessNameFieldNumber;
const int InterliveServerStat::kBussFsv2StreamCountFieldNumber;
const int InterliveServerStat::kBussFsv2TotalSessionFieldNumber;
const int InterliveServerStat::kBussFsv2ActiveSessionFieldNumber;
const int InterliveServerStat::kBussFsv2ConnectionCountFieldNumber;
const int InterliveServerStat::kBussFcv2StreamCountFieldNumber;
const int InterliveServerStat::kBussUploaderConnectionCountFieldNumber;
const int InterliveServerStat::kBussPlayerConnectionCountFieldNumber;
const int InterliveServerStat::kBussPlayerOnlineCntFieldNumber;
const int InterliveServerStat::kProcVmrssFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterliveServerStat::InterliveServerStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InterliveServerStat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InterliveServerStat)
}
InterliveServerStat::InterliveServerStat(const InterliveServerStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proc_process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proc_process_name()) {
    proc_process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_process_name_);
  }
  ::memcpy(&sys_uptime_, &from.sys_uptime_,
    reinterpret_cast<char*>(&proc_vmrss_) -
    reinterpret_cast<char*>(&sys_uptime_) + sizeof(proc_vmrss_));
  // @@protoc_insertion_point(copy_constructor:InterliveServerStat)
}

void InterliveServerStat::SharedCtor() {
  _cached_size_ = 0;
  proc_process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sys_uptime_, 0, reinterpret_cast<char*>(&proc_vmrss_) -
    reinterpret_cast<char*>(&sys_uptime_) + sizeof(proc_vmrss_));
}

InterliveServerStat::~InterliveServerStat() {
  // @@protoc_insertion_point(destructor:InterliveServerStat)
  SharedDtor();
}

void InterliveServerStat::SharedDtor() {
  proc_process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InterliveServerStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterliveServerStat::descriptor() {
  protobuf_InterliveServerStat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_InterliveServerStat_2eproto::file_level_metadata[0].descriptor;
}

const InterliveServerStat& InterliveServerStat::default_instance() {
  protobuf_InterliveServerStat_2eproto::InitDefaults();
  return *internal_default_instance();
}

InterliveServerStat* InterliveServerStat::New(::google::protobuf::Arena* arena) const {
  InterliveServerStat* n = new InterliveServerStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterliveServerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:InterliveServerStat)
  if (has_proc_process_name()) {
    GOOGLE_DCHECK(!proc_process_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*proc_process_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&sys_uptime_, 0, reinterpret_cast<char*>(&sys_net_tx_) -
      reinterpret_cast<char*>(&sys_uptime_) + sizeof(sys_net_tx_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&proc_cpu_use_, 0, reinterpret_cast<char*>(&buss_fsv2_active_session_) -
      reinterpret_cast<char*>(&proc_cpu_use_) + sizeof(buss_fsv2_active_session_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&buss_fsv2_connection_count_, 0, reinterpret_cast<char*>(&proc_vmrss_) -
      reinterpret_cast<char*>(&buss_fsv2_connection_count_) + sizeof(proc_vmrss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InterliveServerStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InterliveServerStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sys_uptime = 1;
      case 1: {
        if (tag == 8u) {
          set_has_sys_uptime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sys_uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sys_cpu_cores = 2;
      case 2: {
        if (tag == 16u) {
          set_has_sys_cpu_cores();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_cpu_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sys_cpu_idle = 3;
      case 3: {
        if (tag == 24u) {
          set_has_sys_cpu_idle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_cpu_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sys_mem_total = 4;
      case 4: {
        if (tag == 32u) {
          set_has_sys_mem_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_mem_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sys_mem_total_free = 5;
      case 5: {
        if (tag == 40u) {
          set_has_sys_mem_total_free();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_mem_total_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sys_net_rx = 6;
      case 6: {
        if (tag == 48u) {
          set_has_sys_net_rx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sys_net_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sys_net_tx = 7;
      case 7: {
        if (tag == 56u) {
          set_has_sys_net_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sys_net_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proc_cpu_use = 8;
      case 8: {
        if (tag == 64u) {
          set_has_proc_cpu_use();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proc_cpu_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proc_sleepavg = 9;
      case 9: {
        if (tag == 72u) {
          set_has_proc_sleepavg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proc_sleepavg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proc_vmpeak = 10;
      case 10: {
        if (tag == 80u) {
          set_has_proc_vmpeak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proc_vmpeak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proc_vmsize = 11;
      case 11: {
        if (tag == 88u) {
          set_has_proc_vmsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proc_vmsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 proc_total_uptime = 12;
      case 12: {
        if (tag == 96u) {
          set_has_proc_total_uptime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_total_uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proc_process_name = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proc_process_name().data(), this->proc_process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InterliveServerStat.proc_process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_fsv2_stream_count = 14;
      case 14: {
        if (tag == 112u) {
          set_has_buss_fsv2_stream_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_fsv2_stream_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_fsv2_total_session = 15;
      case 15: {
        if (tag == 120u) {
          set_has_buss_fsv2_total_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_fsv2_total_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_fsv2_active_session = 16;
      case 16: {
        if (tag == 128u) {
          set_has_buss_fsv2_active_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_fsv2_active_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_fsv2_connection_count = 17;
      case 17: {
        if (tag == 136u) {
          set_has_buss_fsv2_connection_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_fsv2_connection_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_fcv2_stream_count = 18;
      case 18: {
        if (tag == 144u) {
          set_has_buss_fcv2_stream_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_fcv2_stream_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_uploader_connection_count = 19;
      case 19: {
        if (tag == 152u) {
          set_has_buss_uploader_connection_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_uploader_connection_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_player_connection_count = 20;
      case 20: {
        if (tag == 160u) {
          set_has_buss_player_connection_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_player_connection_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buss_player_online_cnt = 21;
      case 21: {
        if (tag == 168u) {
          set_has_buss_player_online_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buss_player_online_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proc_vmrss = 22;
      case 22: {
        if (tag == 176u) {
          set_has_proc_vmrss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proc_vmrss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InterliveServerStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InterliveServerStat)
  return false;
#undef DO_
}

void InterliveServerStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InterliveServerStat)
  // optional uint64 sys_uptime = 1;
  if (has_sys_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sys_uptime(), output);
  }

  // optional int32 sys_cpu_cores = 2;
  if (has_sys_cpu_cores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sys_cpu_cores(), output);
  }

  // optional int32 sys_cpu_idle = 3;
  if (has_sys_cpu_idle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sys_cpu_idle(), output);
  }

  // optional int32 sys_mem_total = 4;
  if (has_sys_mem_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sys_mem_total(), output);
  }

  // optional int32 sys_mem_total_free = 5;
  if (has_sys_mem_total_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sys_mem_total_free(), output);
  }

  // optional uint64 sys_net_rx = 6;
  if (has_sys_net_rx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sys_net_rx(), output);
  }

  // optional uint64 sys_net_tx = 7;
  if (has_sys_net_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sys_net_tx(), output);
  }

  // optional int32 proc_cpu_use = 8;
  if (has_proc_cpu_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->proc_cpu_use(), output);
  }

  // optional int32 proc_sleepavg = 9;
  if (has_proc_sleepavg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->proc_sleepavg(), output);
  }

  // optional int32 proc_vmpeak = 10;
  if (has_proc_vmpeak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->proc_vmpeak(), output);
  }

  // optional int32 proc_vmsize = 11;
  if (has_proc_vmsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->proc_vmsize(), output);
  }

  // optional uint64 proc_total_uptime = 12;
  if (has_proc_total_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->proc_total_uptime(), output);
  }

  // optional string proc_process_name = 13;
  if (has_proc_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_process_name().data(), this->proc_process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InterliveServerStat.proc_process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->proc_process_name(), output);
  }

  // optional int32 buss_fsv2_stream_count = 14;
  if (has_buss_fsv2_stream_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->buss_fsv2_stream_count(), output);
  }

  // optional int32 buss_fsv2_total_session = 15;
  if (has_buss_fsv2_total_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->buss_fsv2_total_session(), output);
  }

  // optional int32 buss_fsv2_active_session = 16;
  if (has_buss_fsv2_active_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->buss_fsv2_active_session(), output);
  }

  // optional int32 buss_fsv2_connection_count = 17;
  if (has_buss_fsv2_connection_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->buss_fsv2_connection_count(), output);
  }

  // optional int32 buss_fcv2_stream_count = 18;
  if (has_buss_fcv2_stream_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->buss_fcv2_stream_count(), output);
  }

  // optional int32 buss_uploader_connection_count = 19;
  if (has_buss_uploader_connection_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->buss_uploader_connection_count(), output);
  }

  // optional int32 buss_player_connection_count = 20;
  if (has_buss_player_connection_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->buss_player_connection_count(), output);
  }

  // optional int32 buss_player_online_cnt = 21;
  if (has_buss_player_online_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->buss_player_online_cnt(), output);
  }

  // optional int32 proc_vmrss = 22;
  if (has_proc_vmrss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->proc_vmrss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InterliveServerStat)
}

::google::protobuf::uint8* InterliveServerStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InterliveServerStat)
  // optional uint64 sys_uptime = 1;
  if (has_sys_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sys_uptime(), target);
  }

  // optional int32 sys_cpu_cores = 2;
  if (has_sys_cpu_cores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sys_cpu_cores(), target);
  }

  // optional int32 sys_cpu_idle = 3;
  if (has_sys_cpu_idle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sys_cpu_idle(), target);
  }

  // optional int32 sys_mem_total = 4;
  if (has_sys_mem_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sys_mem_total(), target);
  }

  // optional int32 sys_mem_total_free = 5;
  if (has_sys_mem_total_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sys_mem_total_free(), target);
  }

  // optional uint64 sys_net_rx = 6;
  if (has_sys_net_rx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sys_net_rx(), target);
  }

  // optional uint64 sys_net_tx = 7;
  if (has_sys_net_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sys_net_tx(), target);
  }

  // optional int32 proc_cpu_use = 8;
  if (has_proc_cpu_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->proc_cpu_use(), target);
  }

  // optional int32 proc_sleepavg = 9;
  if (has_proc_sleepavg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->proc_sleepavg(), target);
  }

  // optional int32 proc_vmpeak = 10;
  if (has_proc_vmpeak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->proc_vmpeak(), target);
  }

  // optional int32 proc_vmsize = 11;
  if (has_proc_vmsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->proc_vmsize(), target);
  }

  // optional uint64 proc_total_uptime = 12;
  if (has_proc_total_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->proc_total_uptime(), target);
  }

  // optional string proc_process_name = 13;
  if (has_proc_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proc_process_name().data(), this->proc_process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InterliveServerStat.proc_process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->proc_process_name(), target);
  }

  // optional int32 buss_fsv2_stream_count = 14;
  if (has_buss_fsv2_stream_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->buss_fsv2_stream_count(), target);
  }

  // optional int32 buss_fsv2_total_session = 15;
  if (has_buss_fsv2_total_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->buss_fsv2_total_session(), target);
  }

  // optional int32 buss_fsv2_active_session = 16;
  if (has_buss_fsv2_active_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->buss_fsv2_active_session(), target);
  }

  // optional int32 buss_fsv2_connection_count = 17;
  if (has_buss_fsv2_connection_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->buss_fsv2_connection_count(), target);
  }

  // optional int32 buss_fcv2_stream_count = 18;
  if (has_buss_fcv2_stream_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->buss_fcv2_stream_count(), target);
  }

  // optional int32 buss_uploader_connection_count = 19;
  if (has_buss_uploader_connection_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->buss_uploader_connection_count(), target);
  }

  // optional int32 buss_player_connection_count = 20;
  if (has_buss_player_connection_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->buss_player_connection_count(), target);
  }

  // optional int32 buss_player_online_cnt = 21;
  if (has_buss_player_online_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->buss_player_online_cnt(), target);
  }

  // optional int32 proc_vmrss = 22;
  if (has_proc_vmrss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->proc_vmrss(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InterliveServerStat)
  return target;
}

size_t InterliveServerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InterliveServerStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string proc_process_name = 13;
    if (has_proc_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_process_name());
    }

    // optional uint64 sys_uptime = 1;
    if (has_sys_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sys_uptime());
    }

    // optional int32 sys_cpu_cores = 2;
    if (has_sys_cpu_cores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_cpu_cores());
    }

    // optional int32 sys_cpu_idle = 3;
    if (has_sys_cpu_idle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_cpu_idle());
    }

    // optional int32 sys_mem_total = 4;
    if (has_sys_mem_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_mem_total());
    }

    // optional int32 sys_mem_total_free = 5;
    if (has_sys_mem_total_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_mem_total_free());
    }

    // optional uint64 sys_net_rx = 6;
    if (has_sys_net_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sys_net_rx());
    }

    // optional uint64 sys_net_tx = 7;
    if (has_sys_net_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sys_net_tx());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 proc_cpu_use = 8;
    if (has_proc_cpu_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proc_cpu_use());
    }

    // optional int32 proc_sleepavg = 9;
    if (has_proc_sleepavg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proc_sleepavg());
    }

    // optional int32 proc_vmpeak = 10;
    if (has_proc_vmpeak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proc_vmpeak());
    }

    // optional int32 proc_vmsize = 11;
    if (has_proc_vmsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proc_vmsize());
    }

    // optional uint64 proc_total_uptime = 12;
    if (has_proc_total_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_total_uptime());
    }

    // optional int32 buss_fsv2_stream_count = 14;
    if (has_buss_fsv2_stream_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_fsv2_stream_count());
    }

    // optional int32 buss_fsv2_total_session = 15;
    if (has_buss_fsv2_total_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_fsv2_total_session());
    }

    // optional int32 buss_fsv2_active_session = 16;
    if (has_buss_fsv2_active_session()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_fsv2_active_session());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 buss_fsv2_connection_count = 17;
    if (has_buss_fsv2_connection_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_fsv2_connection_count());
    }

    // optional int32 buss_fcv2_stream_count = 18;
    if (has_buss_fcv2_stream_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_fcv2_stream_count());
    }

    // optional int32 buss_uploader_connection_count = 19;
    if (has_buss_uploader_connection_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_uploader_connection_count());
    }

    // optional int32 buss_player_connection_count = 20;
    if (has_buss_player_connection_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_player_connection_count());
    }

    // optional int32 buss_player_online_cnt = 21;
    if (has_buss_player_online_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buss_player_online_cnt());
    }

    // optional int32 proc_vmrss = 22;
    if (has_proc_vmrss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proc_vmrss());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterliveServerStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InterliveServerStat)
  GOOGLE_DCHECK_NE(&from, this);
  const InterliveServerStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InterliveServerStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InterliveServerStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InterliveServerStat)
    MergeFrom(*source);
  }
}

void InterliveServerStat::MergeFrom(const InterliveServerStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InterliveServerStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_proc_process_name()) {
      set_has_proc_process_name();
      proc_process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_process_name_);
    }
    if (from.has_sys_uptime()) {
      set_sys_uptime(from.sys_uptime());
    }
    if (from.has_sys_cpu_cores()) {
      set_sys_cpu_cores(from.sys_cpu_cores());
    }
    if (from.has_sys_cpu_idle()) {
      set_sys_cpu_idle(from.sys_cpu_idle());
    }
    if (from.has_sys_mem_total()) {
      set_sys_mem_total(from.sys_mem_total());
    }
    if (from.has_sys_mem_total_free()) {
      set_sys_mem_total_free(from.sys_mem_total_free());
    }
    if (from.has_sys_net_rx()) {
      set_sys_net_rx(from.sys_net_rx());
    }
    if (from.has_sys_net_tx()) {
      set_sys_net_tx(from.sys_net_tx());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_proc_cpu_use()) {
      set_proc_cpu_use(from.proc_cpu_use());
    }
    if (from.has_proc_sleepavg()) {
      set_proc_sleepavg(from.proc_sleepavg());
    }
    if (from.has_proc_vmpeak()) {
      set_proc_vmpeak(from.proc_vmpeak());
    }
    if (from.has_proc_vmsize()) {
      set_proc_vmsize(from.proc_vmsize());
    }
    if (from.has_proc_total_uptime()) {
      set_proc_total_uptime(from.proc_total_uptime());
    }
    if (from.has_buss_fsv2_stream_count()) {
      set_buss_fsv2_stream_count(from.buss_fsv2_stream_count());
    }
    if (from.has_buss_fsv2_total_session()) {
      set_buss_fsv2_total_session(from.buss_fsv2_total_session());
    }
    if (from.has_buss_fsv2_active_session()) {
      set_buss_fsv2_active_session(from.buss_fsv2_active_session());
    }
  }
  if (from._has_bits_[16 / 32] & 4128768u) {
    if (from.has_buss_fsv2_connection_count()) {
      set_buss_fsv2_connection_count(from.buss_fsv2_connection_count());
    }
    if (from.has_buss_fcv2_stream_count()) {
      set_buss_fcv2_stream_count(from.buss_fcv2_stream_count());
    }
    if (from.has_buss_uploader_connection_count()) {
      set_buss_uploader_connection_count(from.buss_uploader_connection_count());
    }
    if (from.has_buss_player_connection_count()) {
      set_buss_player_connection_count(from.buss_player_connection_count());
    }
    if (from.has_buss_player_online_cnt()) {
      set_buss_player_online_cnt(from.buss_player_online_cnt());
    }
    if (from.has_proc_vmrss()) {
      set_proc_vmrss(from.proc_vmrss());
    }
  }
}

void InterliveServerStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InterliveServerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterliveServerStat::CopyFrom(const InterliveServerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InterliveServerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterliveServerStat::IsInitialized() const {
  return true;
}

void InterliveServerStat::Swap(InterliveServerStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterliveServerStat::InternalSwap(InterliveServerStat* other) {
  proc_process_name_.Swap(&other->proc_process_name_);
  std::swap(sys_uptime_, other->sys_uptime_);
  std::swap(sys_cpu_cores_, other->sys_cpu_cores_);
  std::swap(sys_cpu_idle_, other->sys_cpu_idle_);
  std::swap(sys_mem_total_, other->sys_mem_total_);
  std::swap(sys_mem_total_free_, other->sys_mem_total_free_);
  std::swap(sys_net_rx_, other->sys_net_rx_);
  std::swap(sys_net_tx_, other->sys_net_tx_);
  std::swap(proc_cpu_use_, other->proc_cpu_use_);
  std::swap(proc_sleepavg_, other->proc_sleepavg_);
  std::swap(proc_vmpeak_, other->proc_vmpeak_);
  std::swap(proc_vmsize_, other->proc_vmsize_);
  std::swap(proc_total_uptime_, other->proc_total_uptime_);
  std::swap(buss_fsv2_stream_count_, other->buss_fsv2_stream_count_);
  std::swap(buss_fsv2_total_session_, other->buss_fsv2_total_session_);
  std::swap(buss_fsv2_active_session_, other->buss_fsv2_active_session_);
  std::swap(buss_fsv2_connection_count_, other->buss_fsv2_connection_count_);
  std::swap(buss_fcv2_stream_count_, other->buss_fcv2_stream_count_);
  std::swap(buss_uploader_connection_count_, other->buss_uploader_connection_count_);
  std::swap(buss_player_connection_count_, other->buss_player_connection_count_);
  std::swap(buss_player_online_cnt_, other->buss_player_online_cnt_);
  std::swap(proc_vmrss_, other->proc_vmrss_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterliveServerStat::GetMetadata() const {
  protobuf_InterliveServerStat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_InterliveServerStat_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterliveServerStat

// optional uint64 sys_uptime = 1;
bool InterliveServerStat::has_sys_uptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InterliveServerStat::set_has_sys_uptime() {
  _has_bits_[0] |= 0x00000002u;
}
void InterliveServerStat::clear_has_sys_uptime() {
  _has_bits_[0] &= ~0x00000002u;
}
void InterliveServerStat::clear_sys_uptime() {
  sys_uptime_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_uptime();
}
::google::protobuf::uint64 InterliveServerStat::sys_uptime() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_uptime)
  return sys_uptime_;
}
void InterliveServerStat::set_sys_uptime(::google::protobuf::uint64 value) {
  set_has_sys_uptime();
  sys_uptime_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_uptime)
}

// optional int32 sys_cpu_cores = 2;
bool InterliveServerStat::has_sys_cpu_cores() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InterliveServerStat::set_has_sys_cpu_cores() {
  _has_bits_[0] |= 0x00000004u;
}
void InterliveServerStat::clear_has_sys_cpu_cores() {
  _has_bits_[0] &= ~0x00000004u;
}
void InterliveServerStat::clear_sys_cpu_cores() {
  sys_cpu_cores_ = 0;
  clear_has_sys_cpu_cores();
}
::google::protobuf::int32 InterliveServerStat::sys_cpu_cores() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_cpu_cores)
  return sys_cpu_cores_;
}
void InterliveServerStat::set_sys_cpu_cores(::google::protobuf::int32 value) {
  set_has_sys_cpu_cores();
  sys_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_cpu_cores)
}

// optional int32 sys_cpu_idle = 3;
bool InterliveServerStat::has_sys_cpu_idle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InterliveServerStat::set_has_sys_cpu_idle() {
  _has_bits_[0] |= 0x00000008u;
}
void InterliveServerStat::clear_has_sys_cpu_idle() {
  _has_bits_[0] &= ~0x00000008u;
}
void InterliveServerStat::clear_sys_cpu_idle() {
  sys_cpu_idle_ = 0;
  clear_has_sys_cpu_idle();
}
::google::protobuf::int32 InterliveServerStat::sys_cpu_idle() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_cpu_idle)
  return sys_cpu_idle_;
}
void InterliveServerStat::set_sys_cpu_idle(::google::protobuf::int32 value) {
  set_has_sys_cpu_idle();
  sys_cpu_idle_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_cpu_idle)
}

// optional int32 sys_mem_total = 4;
bool InterliveServerStat::has_sys_mem_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InterliveServerStat::set_has_sys_mem_total() {
  _has_bits_[0] |= 0x00000010u;
}
void InterliveServerStat::clear_has_sys_mem_total() {
  _has_bits_[0] &= ~0x00000010u;
}
void InterliveServerStat::clear_sys_mem_total() {
  sys_mem_total_ = 0;
  clear_has_sys_mem_total();
}
::google::protobuf::int32 InterliveServerStat::sys_mem_total() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_mem_total)
  return sys_mem_total_;
}
void InterliveServerStat::set_sys_mem_total(::google::protobuf::int32 value) {
  set_has_sys_mem_total();
  sys_mem_total_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_mem_total)
}

// optional int32 sys_mem_total_free = 5;
bool InterliveServerStat::has_sys_mem_total_free() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InterliveServerStat::set_has_sys_mem_total_free() {
  _has_bits_[0] |= 0x00000020u;
}
void InterliveServerStat::clear_has_sys_mem_total_free() {
  _has_bits_[0] &= ~0x00000020u;
}
void InterliveServerStat::clear_sys_mem_total_free() {
  sys_mem_total_free_ = 0;
  clear_has_sys_mem_total_free();
}
::google::protobuf::int32 InterliveServerStat::sys_mem_total_free() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_mem_total_free)
  return sys_mem_total_free_;
}
void InterliveServerStat::set_sys_mem_total_free(::google::protobuf::int32 value) {
  set_has_sys_mem_total_free();
  sys_mem_total_free_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_mem_total_free)
}

// optional uint64 sys_net_rx = 6;
bool InterliveServerStat::has_sys_net_rx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InterliveServerStat::set_has_sys_net_rx() {
  _has_bits_[0] |= 0x00000040u;
}
void InterliveServerStat::clear_has_sys_net_rx() {
  _has_bits_[0] &= ~0x00000040u;
}
void InterliveServerStat::clear_sys_net_rx() {
  sys_net_rx_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_net_rx();
}
::google::protobuf::uint64 InterliveServerStat::sys_net_rx() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_net_rx)
  return sys_net_rx_;
}
void InterliveServerStat::set_sys_net_rx(::google::protobuf::uint64 value) {
  set_has_sys_net_rx();
  sys_net_rx_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_net_rx)
}

// optional uint64 sys_net_tx = 7;
bool InterliveServerStat::has_sys_net_tx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InterliveServerStat::set_has_sys_net_tx() {
  _has_bits_[0] |= 0x00000080u;
}
void InterliveServerStat::clear_has_sys_net_tx() {
  _has_bits_[0] &= ~0x00000080u;
}
void InterliveServerStat::clear_sys_net_tx() {
  sys_net_tx_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_net_tx();
}
::google::protobuf::uint64 InterliveServerStat::sys_net_tx() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.sys_net_tx)
  return sys_net_tx_;
}
void InterliveServerStat::set_sys_net_tx(::google::protobuf::uint64 value) {
  set_has_sys_net_tx();
  sys_net_tx_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.sys_net_tx)
}

// optional int32 proc_cpu_use = 8;
bool InterliveServerStat::has_proc_cpu_use() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InterliveServerStat::set_has_proc_cpu_use() {
  _has_bits_[0] |= 0x00000100u;
}
void InterliveServerStat::clear_has_proc_cpu_use() {
  _has_bits_[0] &= ~0x00000100u;
}
void InterliveServerStat::clear_proc_cpu_use() {
  proc_cpu_use_ = 0;
  clear_has_proc_cpu_use();
}
::google::protobuf::int32 InterliveServerStat::proc_cpu_use() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_cpu_use)
  return proc_cpu_use_;
}
void InterliveServerStat::set_proc_cpu_use(::google::protobuf::int32 value) {
  set_has_proc_cpu_use();
  proc_cpu_use_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_cpu_use)
}

// optional int32 proc_sleepavg = 9;
bool InterliveServerStat::has_proc_sleepavg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void InterliveServerStat::set_has_proc_sleepavg() {
  _has_bits_[0] |= 0x00000200u;
}
void InterliveServerStat::clear_has_proc_sleepavg() {
  _has_bits_[0] &= ~0x00000200u;
}
void InterliveServerStat::clear_proc_sleepavg() {
  proc_sleepavg_ = 0;
  clear_has_proc_sleepavg();
}
::google::protobuf::int32 InterliveServerStat::proc_sleepavg() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_sleepavg)
  return proc_sleepavg_;
}
void InterliveServerStat::set_proc_sleepavg(::google::protobuf::int32 value) {
  set_has_proc_sleepavg();
  proc_sleepavg_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_sleepavg)
}

// optional int32 proc_vmpeak = 10;
bool InterliveServerStat::has_proc_vmpeak() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void InterliveServerStat::set_has_proc_vmpeak() {
  _has_bits_[0] |= 0x00000400u;
}
void InterliveServerStat::clear_has_proc_vmpeak() {
  _has_bits_[0] &= ~0x00000400u;
}
void InterliveServerStat::clear_proc_vmpeak() {
  proc_vmpeak_ = 0;
  clear_has_proc_vmpeak();
}
::google::protobuf::int32 InterliveServerStat::proc_vmpeak() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_vmpeak)
  return proc_vmpeak_;
}
void InterliveServerStat::set_proc_vmpeak(::google::protobuf::int32 value) {
  set_has_proc_vmpeak();
  proc_vmpeak_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_vmpeak)
}

// optional int32 proc_vmsize = 11;
bool InterliveServerStat::has_proc_vmsize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void InterliveServerStat::set_has_proc_vmsize() {
  _has_bits_[0] |= 0x00000800u;
}
void InterliveServerStat::clear_has_proc_vmsize() {
  _has_bits_[0] &= ~0x00000800u;
}
void InterliveServerStat::clear_proc_vmsize() {
  proc_vmsize_ = 0;
  clear_has_proc_vmsize();
}
::google::protobuf::int32 InterliveServerStat::proc_vmsize() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_vmsize)
  return proc_vmsize_;
}
void InterliveServerStat::set_proc_vmsize(::google::protobuf::int32 value) {
  set_has_proc_vmsize();
  proc_vmsize_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_vmsize)
}

// optional uint64 proc_total_uptime = 12;
bool InterliveServerStat::has_proc_total_uptime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void InterliveServerStat::set_has_proc_total_uptime() {
  _has_bits_[0] |= 0x00001000u;
}
void InterliveServerStat::clear_has_proc_total_uptime() {
  _has_bits_[0] &= ~0x00001000u;
}
void InterliveServerStat::clear_proc_total_uptime() {
  proc_total_uptime_ = GOOGLE_ULONGLONG(0);
  clear_has_proc_total_uptime();
}
::google::protobuf::uint64 InterliveServerStat::proc_total_uptime() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_total_uptime)
  return proc_total_uptime_;
}
void InterliveServerStat::set_proc_total_uptime(::google::protobuf::uint64 value) {
  set_has_proc_total_uptime();
  proc_total_uptime_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_total_uptime)
}

// optional string proc_process_name = 13;
bool InterliveServerStat::has_proc_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InterliveServerStat::set_has_proc_process_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InterliveServerStat::clear_has_proc_process_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InterliveServerStat::clear_proc_process_name() {
  proc_process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_process_name();
}
const ::std::string& InterliveServerStat::proc_process_name() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_process_name)
  return proc_process_name_.GetNoArena();
}
void InterliveServerStat::set_proc_process_name(const ::std::string& value) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_process_name)
}
#if LANG_CXX11
void InterliveServerStat::set_proc_process_name(::std::string&& value) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InterliveServerStat.proc_process_name)
}
#endif
void InterliveServerStat::set_proc_process_name(const char* value) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InterliveServerStat.proc_process_name)
}
void InterliveServerStat::set_proc_process_name(const char* value, size_t size) {
  set_has_proc_process_name();
  proc_process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InterliveServerStat.proc_process_name)
}
::std::string* InterliveServerStat::mutable_proc_process_name() {
  set_has_proc_process_name();
  // @@protoc_insertion_point(field_mutable:InterliveServerStat.proc_process_name)
  return proc_process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InterliveServerStat::release_proc_process_name() {
  // @@protoc_insertion_point(field_release:InterliveServerStat.proc_process_name)
  clear_has_proc_process_name();
  return proc_process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InterliveServerStat::set_allocated_proc_process_name(::std::string* proc_process_name) {
  if (proc_process_name != NULL) {
    set_has_proc_process_name();
  } else {
    clear_has_proc_process_name();
  }
  proc_process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_process_name);
  // @@protoc_insertion_point(field_set_allocated:InterliveServerStat.proc_process_name)
}

// optional int32 buss_fsv2_stream_count = 14;
bool InterliveServerStat::has_buss_fsv2_stream_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void InterliveServerStat::set_has_buss_fsv2_stream_count() {
  _has_bits_[0] |= 0x00002000u;
}
void InterliveServerStat::clear_has_buss_fsv2_stream_count() {
  _has_bits_[0] &= ~0x00002000u;
}
void InterliveServerStat::clear_buss_fsv2_stream_count() {
  buss_fsv2_stream_count_ = 0;
  clear_has_buss_fsv2_stream_count();
}
::google::protobuf::int32 InterliveServerStat::buss_fsv2_stream_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_stream_count)
  return buss_fsv2_stream_count_;
}
void InterliveServerStat::set_buss_fsv2_stream_count(::google::protobuf::int32 value) {
  set_has_buss_fsv2_stream_count();
  buss_fsv2_stream_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_stream_count)
}

// optional int32 buss_fsv2_total_session = 15;
bool InterliveServerStat::has_buss_fsv2_total_session() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void InterliveServerStat::set_has_buss_fsv2_total_session() {
  _has_bits_[0] |= 0x00004000u;
}
void InterliveServerStat::clear_has_buss_fsv2_total_session() {
  _has_bits_[0] &= ~0x00004000u;
}
void InterliveServerStat::clear_buss_fsv2_total_session() {
  buss_fsv2_total_session_ = 0;
  clear_has_buss_fsv2_total_session();
}
::google::protobuf::int32 InterliveServerStat::buss_fsv2_total_session() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_total_session)
  return buss_fsv2_total_session_;
}
void InterliveServerStat::set_buss_fsv2_total_session(::google::protobuf::int32 value) {
  set_has_buss_fsv2_total_session();
  buss_fsv2_total_session_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_total_session)
}

// optional int32 buss_fsv2_active_session = 16;
bool InterliveServerStat::has_buss_fsv2_active_session() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void InterliveServerStat::set_has_buss_fsv2_active_session() {
  _has_bits_[0] |= 0x00008000u;
}
void InterliveServerStat::clear_has_buss_fsv2_active_session() {
  _has_bits_[0] &= ~0x00008000u;
}
void InterliveServerStat::clear_buss_fsv2_active_session() {
  buss_fsv2_active_session_ = 0;
  clear_has_buss_fsv2_active_session();
}
::google::protobuf::int32 InterliveServerStat::buss_fsv2_active_session() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_active_session)
  return buss_fsv2_active_session_;
}
void InterliveServerStat::set_buss_fsv2_active_session(::google::protobuf::int32 value) {
  set_has_buss_fsv2_active_session();
  buss_fsv2_active_session_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_active_session)
}

// optional int32 buss_fsv2_connection_count = 17;
bool InterliveServerStat::has_buss_fsv2_connection_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void InterliveServerStat::set_has_buss_fsv2_connection_count() {
  _has_bits_[0] |= 0x00010000u;
}
void InterliveServerStat::clear_has_buss_fsv2_connection_count() {
  _has_bits_[0] &= ~0x00010000u;
}
void InterliveServerStat::clear_buss_fsv2_connection_count() {
  buss_fsv2_connection_count_ = 0;
  clear_has_buss_fsv2_connection_count();
}
::google::protobuf::int32 InterliveServerStat::buss_fsv2_connection_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fsv2_connection_count)
  return buss_fsv2_connection_count_;
}
void InterliveServerStat::set_buss_fsv2_connection_count(::google::protobuf::int32 value) {
  set_has_buss_fsv2_connection_count();
  buss_fsv2_connection_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fsv2_connection_count)
}

// optional int32 buss_fcv2_stream_count = 18;
bool InterliveServerStat::has_buss_fcv2_stream_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void InterliveServerStat::set_has_buss_fcv2_stream_count() {
  _has_bits_[0] |= 0x00020000u;
}
void InterliveServerStat::clear_has_buss_fcv2_stream_count() {
  _has_bits_[0] &= ~0x00020000u;
}
void InterliveServerStat::clear_buss_fcv2_stream_count() {
  buss_fcv2_stream_count_ = 0;
  clear_has_buss_fcv2_stream_count();
}
::google::protobuf::int32 InterliveServerStat::buss_fcv2_stream_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_fcv2_stream_count)
  return buss_fcv2_stream_count_;
}
void InterliveServerStat::set_buss_fcv2_stream_count(::google::protobuf::int32 value) {
  set_has_buss_fcv2_stream_count();
  buss_fcv2_stream_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_fcv2_stream_count)
}

// optional int32 buss_uploader_connection_count = 19;
bool InterliveServerStat::has_buss_uploader_connection_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void InterliveServerStat::set_has_buss_uploader_connection_count() {
  _has_bits_[0] |= 0x00040000u;
}
void InterliveServerStat::clear_has_buss_uploader_connection_count() {
  _has_bits_[0] &= ~0x00040000u;
}
void InterliveServerStat::clear_buss_uploader_connection_count() {
  buss_uploader_connection_count_ = 0;
  clear_has_buss_uploader_connection_count();
}
::google::protobuf::int32 InterliveServerStat::buss_uploader_connection_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_uploader_connection_count)
  return buss_uploader_connection_count_;
}
void InterliveServerStat::set_buss_uploader_connection_count(::google::protobuf::int32 value) {
  set_has_buss_uploader_connection_count();
  buss_uploader_connection_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_uploader_connection_count)
}

// optional int32 buss_player_connection_count = 20;
bool InterliveServerStat::has_buss_player_connection_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void InterliveServerStat::set_has_buss_player_connection_count() {
  _has_bits_[0] |= 0x00080000u;
}
void InterliveServerStat::clear_has_buss_player_connection_count() {
  _has_bits_[0] &= ~0x00080000u;
}
void InterliveServerStat::clear_buss_player_connection_count() {
  buss_player_connection_count_ = 0;
  clear_has_buss_player_connection_count();
}
::google::protobuf::int32 InterliveServerStat::buss_player_connection_count() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_player_connection_count)
  return buss_player_connection_count_;
}
void InterliveServerStat::set_buss_player_connection_count(::google::protobuf::int32 value) {
  set_has_buss_player_connection_count();
  buss_player_connection_count_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_player_connection_count)
}

// optional int32 buss_player_online_cnt = 21;
bool InterliveServerStat::has_buss_player_online_cnt() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void InterliveServerStat::set_has_buss_player_online_cnt() {
  _has_bits_[0] |= 0x00100000u;
}
void InterliveServerStat::clear_has_buss_player_online_cnt() {
  _has_bits_[0] &= ~0x00100000u;
}
void InterliveServerStat::clear_buss_player_online_cnt() {
  buss_player_online_cnt_ = 0;
  clear_has_buss_player_online_cnt();
}
::google::protobuf::int32 InterliveServerStat::buss_player_online_cnt() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.buss_player_online_cnt)
  return buss_player_online_cnt_;
}
void InterliveServerStat::set_buss_player_online_cnt(::google::protobuf::int32 value) {
  set_has_buss_player_online_cnt();
  buss_player_online_cnt_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.buss_player_online_cnt)
}

// optional int32 proc_vmrss = 22;
bool InterliveServerStat::has_proc_vmrss() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void InterliveServerStat::set_has_proc_vmrss() {
  _has_bits_[0] |= 0x00200000u;
}
void InterliveServerStat::clear_has_proc_vmrss() {
  _has_bits_[0] &= ~0x00200000u;
}
void InterliveServerStat::clear_proc_vmrss() {
  proc_vmrss_ = 0;
  clear_has_proc_vmrss();
}
::google::protobuf::int32 InterliveServerStat::proc_vmrss() const {
  // @@protoc_insertion_point(field_get:InterliveServerStat.proc_vmrss)
  return proc_vmrss_;
}
void InterliveServerStat::set_proc_vmrss(::google::protobuf::int32 value) {
  set_has_proc_vmrss();
  proc_vmrss_ = value;
  // @@protoc_insertion_point(field_set:InterliveServerStat.proc_vmrss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
