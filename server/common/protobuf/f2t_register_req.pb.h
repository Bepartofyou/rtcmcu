// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: f2t_register_req.proto

#ifndef PROTOBUF_f2t_5fregister_5freq_2eproto__INCLUDED
#define PROTOBUF_f2t_5fregister_5freq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class f2t_register_req_v4;
class f2t_register_req_v4DefaultTypeInternal;
extern f2t_register_req_v4DefaultTypeInternal _f2t_register_req_v4_default_instance_;

namespace protobuf_f2t_5fregister_5freq_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_f2t_5fregister_5freq_2eproto

enum LCdnStreamTransportType {
  LCdnStreamTransportFlv = 1,
  LCdnStreamTransportRtp = 2
};
bool LCdnStreamTransportType_IsValid(int value);
const LCdnStreamTransportType LCdnStreamTransportType_MIN = LCdnStreamTransportFlv;
const LCdnStreamTransportType LCdnStreamTransportType_MAX = LCdnStreamTransportRtp;
const int LCdnStreamTransportType_ARRAYSIZE = LCdnStreamTransportType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LCdnStreamTransportType_descriptor();
inline const ::std::string& LCdnStreamTransportType_Name(LCdnStreamTransportType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LCdnStreamTransportType_descriptor(), value);
}
inline bool LCdnStreamTransportType_Parse(
    const ::std::string& name, LCdnStreamTransportType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LCdnStreamTransportType>(
    LCdnStreamTransportType_descriptor(), name, value);
}
// ===================================================================

class f2t_register_req_v4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:f2t_register_req_v4) */ {
 public:
  f2t_register_req_v4();
  virtual ~f2t_register_req_v4();

  f2t_register_req_v4(const f2t_register_req_v4& from);

  inline f2t_register_req_v4& operator=(const f2t_register_req_v4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const f2t_register_req_v4& default_instance();

  static inline const f2t_register_req_v4* internal_default_instance() {
    return reinterpret_cast<const f2t_register_req_v4*>(
               &_f2t_register_req_v4_default_instance_);
  }

  void Swap(f2t_register_req_v4* other);

  // implements Message ----------------------------------------------

  inline f2t_register_req_v4* New() const PROTOBUF_FINAL { return New(NULL); }

  f2t_register_req_v4* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const f2t_register_req_v4& from);
  void MergeFrom(const f2t_register_req_v4& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(f2t_register_req_v4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 public_ip = 6;
  int public_ip_size() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 6;
  ::google::protobuf::uint32 public_ip(int index) const;
  void set_public_ip(int index, ::google::protobuf::uint32 value);
  void add_public_ip(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      public_ip() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_public_ip();

  // repeated uint32 private_ip = 7;
  int private_ip_size() const;
  void clear_private_ip();
  static const int kPrivateIpFieldNumber = 7;
  ::google::protobuf::uint32 private_ip(int index) const;
  void set_private_ip(int index, ::google::protobuf::uint32 value);
  void add_private_ip(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      private_ip() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_private_ip();

  // optional uint32 ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // optional uint32 asn = 2;
  bool has_asn() const;
  void clear_asn();
  static const int kAsnFieldNumber = 2;
  ::google::protobuf::uint32 asn() const;
  void set_asn(::google::protobuf::uint32 value);

  // optional uint32 region = 3;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  ::google::protobuf::uint32 region() const;
  void set_region(::google::protobuf::uint32 value);

  // optional uint32 backend_port = 4;
  bool has_backend_port() const;
  void clear_backend_port();
  static const int kBackendPortFieldNumber = 4;
  ::google::protobuf::uint32 backend_port() const;
  void set_backend_port(::google::protobuf::uint32 value);

  // optional uint32 player_port = 5;
  bool has_player_port() const;
  void clear_player_port();
  static const int kPlayerPortFieldNumber = 5;
  ::google::protobuf::uint32 player_port() const;
  void set_player_port(::google::protobuf::uint32 value);

  // optional uint32 uploader_port = 8;
  bool has_uploader_port() const;
  void clear_uploader_port();
  static const int kUploaderPortFieldNumber = 8;
  ::google::protobuf::uint32 uploader_port() const;
  void set_uploader_port(::google::protobuf::uint32 value);

  // optional uint32 rtp_backend_port = 9;
  bool has_rtp_backend_port() const;
  void clear_rtp_backend_port();
  static const int kRtpBackendPortFieldNumber = 9;
  ::google::protobuf::uint32 rtp_backend_port() const;
  void set_rtp_backend_port(::google::protobuf::uint32 value);

  // optional uint32 rtp_player_port = 10;
  bool has_rtp_player_port() const;
  void clear_rtp_player_port();
  static const int kRtpPlayerPortFieldNumber = 10;
  ::google::protobuf::uint32 rtp_player_port() const;
  void set_rtp_player_port(::google::protobuf::uint32 value);

  // optional uint32 rtp_uploader_port = 11;
  bool has_rtp_uploader_port() const;
  void clear_rtp_uploader_port();
  static const int kRtpUploaderPortFieldNumber = 11;
  ::google::protobuf::uint32 rtp_uploader_port() const;
  void set_rtp_uploader_port(::google::protobuf::uint32 value);

  // optional .LCdnStreamTransportType transport_type = 12;
  bool has_transport_type() const;
  void clear_transport_type();
  static const int kTransportTypeFieldNumber = 12;
  ::LCdnStreamTransportType transport_type() const;
  void set_transport_type(::LCdnStreamTransportType value);

  // @@protoc_insertion_point(class_scope:f2t_register_req_v4)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_asn();
  void clear_has_asn();
  void set_has_region();
  void clear_has_region();
  void set_has_backend_port();
  void clear_has_backend_port();
  void set_has_player_port();
  void clear_has_player_port();
  void set_has_uploader_port();
  void clear_has_uploader_port();
  void set_has_rtp_backend_port();
  void clear_has_rtp_backend_port();
  void set_has_rtp_player_port();
  void clear_has_rtp_player_port();
  void set_has_rtp_uploader_port();
  void clear_has_rtp_uploader_port();
  void set_has_transport_type();
  void clear_has_transport_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > public_ip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > private_ip_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 asn_;
  ::google::protobuf::uint32 region_;
  ::google::protobuf::uint32 backend_port_;
  ::google::protobuf::uint32 player_port_;
  ::google::protobuf::uint32 uploader_port_;
  ::google::protobuf::uint32 rtp_backend_port_;
  ::google::protobuf::uint32 rtp_player_port_;
  ::google::protobuf::uint32 rtp_uploader_port_;
  int transport_type_;
  friend struct  protobuf_f2t_5fregister_5freq_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// f2t_register_req_v4

// optional uint32 ip = 1;
inline bool f2t_register_req_v4::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void f2t_register_req_v4::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void f2t_register_req_v4::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void f2t_register_req_v4::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::ip() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.ip)
  return ip_;
}
inline void f2t_register_req_v4::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.ip)
}

// optional uint32 asn = 2;
inline bool f2t_register_req_v4::has_asn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void f2t_register_req_v4::set_has_asn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void f2t_register_req_v4::clear_has_asn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void f2t_register_req_v4::clear_asn() {
  asn_ = 0u;
  clear_has_asn();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::asn() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.asn)
  return asn_;
}
inline void f2t_register_req_v4::set_asn(::google::protobuf::uint32 value) {
  set_has_asn();
  asn_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.asn)
}

// optional uint32 region = 3;
inline bool f2t_register_req_v4::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void f2t_register_req_v4::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void f2t_register_req_v4::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void f2t_register_req_v4::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::region() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.region)
  return region_;
}
inline void f2t_register_req_v4::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.region)
}

// optional uint32 backend_port = 4;
inline bool f2t_register_req_v4::has_backend_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void f2t_register_req_v4::set_has_backend_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void f2t_register_req_v4::clear_has_backend_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void f2t_register_req_v4::clear_backend_port() {
  backend_port_ = 0u;
  clear_has_backend_port();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::backend_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.backend_port)
  return backend_port_;
}
inline void f2t_register_req_v4::set_backend_port(::google::protobuf::uint32 value) {
  set_has_backend_port();
  backend_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.backend_port)
}

// optional uint32 player_port = 5;
inline bool f2t_register_req_v4::has_player_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void f2t_register_req_v4::set_has_player_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void f2t_register_req_v4::clear_has_player_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void f2t_register_req_v4::clear_player_port() {
  player_port_ = 0u;
  clear_has_player_port();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::player_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.player_port)
  return player_port_;
}
inline void f2t_register_req_v4::set_player_port(::google::protobuf::uint32 value) {
  set_has_player_port();
  player_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.player_port)
}

// repeated uint32 public_ip = 6;
inline int f2t_register_req_v4::public_ip_size() const {
  return public_ip_.size();
}
inline void f2t_register_req_v4::clear_public_ip() {
  public_ip_.Clear();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::public_ip(int index) const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.public_ip)
  return public_ip_.Get(index);
}
inline void f2t_register_req_v4::set_public_ip(int index, ::google::protobuf::uint32 value) {
  public_ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.public_ip)
}
inline void f2t_register_req_v4::add_public_ip(::google::protobuf::uint32 value) {
  public_ip_.Add(value);
  // @@protoc_insertion_point(field_add:f2t_register_req_v4.public_ip)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
f2t_register_req_v4::public_ip() const {
  // @@protoc_insertion_point(field_list:f2t_register_req_v4.public_ip)
  return public_ip_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
f2t_register_req_v4::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable_list:f2t_register_req_v4.public_ip)
  return &public_ip_;
}

// repeated uint32 private_ip = 7;
inline int f2t_register_req_v4::private_ip_size() const {
  return private_ip_.size();
}
inline void f2t_register_req_v4::clear_private_ip() {
  private_ip_.Clear();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::private_ip(int index) const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.private_ip)
  return private_ip_.Get(index);
}
inline void f2t_register_req_v4::set_private_ip(int index, ::google::protobuf::uint32 value) {
  private_ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.private_ip)
}
inline void f2t_register_req_v4::add_private_ip(::google::protobuf::uint32 value) {
  private_ip_.Add(value);
  // @@protoc_insertion_point(field_add:f2t_register_req_v4.private_ip)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
f2t_register_req_v4::private_ip() const {
  // @@protoc_insertion_point(field_list:f2t_register_req_v4.private_ip)
  return private_ip_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
f2t_register_req_v4::mutable_private_ip() {
  // @@protoc_insertion_point(field_mutable_list:f2t_register_req_v4.private_ip)
  return &private_ip_;
}

// optional uint32 uploader_port = 8;
inline bool f2t_register_req_v4::has_uploader_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void f2t_register_req_v4::set_has_uploader_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void f2t_register_req_v4::clear_has_uploader_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void f2t_register_req_v4::clear_uploader_port() {
  uploader_port_ = 0u;
  clear_has_uploader_port();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::uploader_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.uploader_port)
  return uploader_port_;
}
inline void f2t_register_req_v4::set_uploader_port(::google::protobuf::uint32 value) {
  set_has_uploader_port();
  uploader_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.uploader_port)
}

// optional uint32 rtp_backend_port = 9;
inline bool f2t_register_req_v4::has_rtp_backend_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void f2t_register_req_v4::set_has_rtp_backend_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void f2t_register_req_v4::clear_has_rtp_backend_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void f2t_register_req_v4::clear_rtp_backend_port() {
  rtp_backend_port_ = 0u;
  clear_has_rtp_backend_port();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::rtp_backend_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.rtp_backend_port)
  return rtp_backend_port_;
}
inline void f2t_register_req_v4::set_rtp_backend_port(::google::protobuf::uint32 value) {
  set_has_rtp_backend_port();
  rtp_backend_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.rtp_backend_port)
}

// optional uint32 rtp_player_port = 10;
inline bool f2t_register_req_v4::has_rtp_player_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void f2t_register_req_v4::set_has_rtp_player_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void f2t_register_req_v4::clear_has_rtp_player_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void f2t_register_req_v4::clear_rtp_player_port() {
  rtp_player_port_ = 0u;
  clear_has_rtp_player_port();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::rtp_player_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.rtp_player_port)
  return rtp_player_port_;
}
inline void f2t_register_req_v4::set_rtp_player_port(::google::protobuf::uint32 value) {
  set_has_rtp_player_port();
  rtp_player_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.rtp_player_port)
}

// optional uint32 rtp_uploader_port = 11;
inline bool f2t_register_req_v4::has_rtp_uploader_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void f2t_register_req_v4::set_has_rtp_uploader_port() {
  _has_bits_[0] |= 0x00000100u;
}
inline void f2t_register_req_v4::clear_has_rtp_uploader_port() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void f2t_register_req_v4::clear_rtp_uploader_port() {
  rtp_uploader_port_ = 0u;
  clear_has_rtp_uploader_port();
}
inline ::google::protobuf::uint32 f2t_register_req_v4::rtp_uploader_port() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.rtp_uploader_port)
  return rtp_uploader_port_;
}
inline void f2t_register_req_v4::set_rtp_uploader_port(::google::protobuf::uint32 value) {
  set_has_rtp_uploader_port();
  rtp_uploader_port_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.rtp_uploader_port)
}

// optional .LCdnStreamTransportType transport_type = 12;
inline bool f2t_register_req_v4::has_transport_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void f2t_register_req_v4::set_has_transport_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void f2t_register_req_v4::clear_has_transport_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void f2t_register_req_v4::clear_transport_type() {
  transport_type_ = 1;
  clear_has_transport_type();
}
inline ::LCdnStreamTransportType f2t_register_req_v4::transport_type() const {
  // @@protoc_insertion_point(field_get:f2t_register_req_v4.transport_type)
  return static_cast< ::LCdnStreamTransportType >(transport_type_);
}
inline void f2t_register_req_v4::set_transport_type(::LCdnStreamTransportType value) {
  assert(::LCdnStreamTransportType_IsValid(value));
  set_has_transport_type();
  transport_type_ = value;
  // @@protoc_insertion_point(field_set:f2t_register_req_v4.transport_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LCdnStreamTransportType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LCdnStreamTransportType>() {
  return ::LCdnStreamTransportType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_f2t_5fregister_5freq_2eproto__INCLUDED
