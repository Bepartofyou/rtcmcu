// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tracker {

namespace {

const ::google::protobuf::Descriptor* F2TRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  F2TRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* F2TRegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  F2TRegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* F2TAddrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  F2TAddrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* F2TAddrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  F2TAddrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* F2TUpdateStreamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  F2TUpdateStreamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* F2TUpdateStreamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  F2TUpdateStreamResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* EchoService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_2eproto() {
  protobuf_AddDesc_tracker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker.proto");
  GOOGLE_CHECK(file != NULL);
  F2TRegisterRequest_descriptor_ = file->message_type(0);
  static const int F2TRegisterRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterRequest, asn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterRequest, region_),
  };
  F2TRegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      F2TRegisterRequest_descriptor_,
      F2TRegisterRequest::default_instance_,
      F2TRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(F2TRegisterRequest));
  F2TRegisterResponse_descriptor_ = file->message_type(1);
  static const int F2TRegisterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterResponse, result_),
  };
  F2TRegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      F2TRegisterResponse_descriptor_,
      F2TRegisterResponse::default_instance_,
      F2TRegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TRegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(F2TRegisterResponse));
  F2TAddrRequest_descriptor_ = file->message_type(2);
  static const int F2TAddrRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrRequest, asn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrRequest, level_),
  };
  F2TAddrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      F2TAddrRequest_descriptor_,
      F2TAddrRequest::default_instance_,
      F2TAddrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(F2TAddrRequest));
  F2TAddrResponse_descriptor_ = file->message_type(3);
  static const int F2TAddrResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrResponse, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrResponse, level_),
  };
  F2TAddrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      F2TAddrResponse_descriptor_,
      F2TAddrResponse::default_instance_,
      F2TAddrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TAddrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(F2TAddrResponse));
  F2TUpdateStreamRequest_descriptor_ = file->message_type(4);
  static const int F2TUpdateStreamRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TUpdateStreamRequest, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TUpdateStreamRequest, level_),
  };
  F2TUpdateStreamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      F2TUpdateStreamRequest_descriptor_,
      F2TUpdateStreamRequest::default_instance_,
      F2TUpdateStreamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TUpdateStreamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TUpdateStreamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(F2TUpdateStreamRequest));
  F2TUpdateStreamResponse_descriptor_ = file->message_type(5);
  static const int F2TUpdateStreamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TUpdateStreamResponse, result_),
  };
  F2TUpdateStreamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      F2TUpdateStreamResponse_descriptor_,
      F2TUpdateStreamResponse::default_instance_,
      F2TUpdateStreamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TUpdateStreamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(F2TUpdateStreamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(F2TUpdateStreamResponse));
  EchoService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    F2TRegisterRequest_descriptor_, &F2TRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    F2TRegisterResponse_descriptor_, &F2TRegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    F2TAddrRequest_descriptor_, &F2TAddrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    F2TAddrResponse_descriptor_, &F2TAddrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    F2TUpdateStreamRequest_descriptor_, &F2TUpdateStreamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    F2TUpdateStreamResponse_descriptor_, &F2TUpdateStreamResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_2eproto() {
  delete F2TRegisterRequest::default_instance_;
  delete F2TRegisterRequest_reflection_;
  delete F2TRegisterResponse::default_instance_;
  delete F2TRegisterResponse_reflection_;
  delete F2TAddrRequest::default_instance_;
  delete F2TAddrRequest_reflection_;
  delete F2TAddrResponse::default_instance_;
  delete F2TAddrResponse_reflection_;
  delete F2TUpdateStreamRequest::default_instance_;
  delete F2TUpdateStreamRequest_reflection_;
  delete F2TUpdateStreamResponse::default_instance_;
  delete F2TUpdateStreamResponse_reflection_;
}

void protobuf_AddDesc_tracker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtracker.proto\022\007tracker\"K\n\022F2TRegisterR"
    "equest\022\n\n\002ip\030\001 \002(\r\022\014\n\004port\030\002 \002(\r\022\013\n\003asn\030"
    "\003 \002(\r\022\016\n\006region\030\004 \002(\r\"%\n\023F2TRegisterResp"
    "onse\022\016\n\006result\030\001 \002(\r\"V\n\016F2TAddrRequest\022\n"
    "\n\002ip\030\001 \002(\r\022\014\n\004port\030\002 \002(\r\022\013\n\003asn\030\003 \002(\r\022\016\n"
    "\006region\030\004 \002(\r\022\r\n\005level\030\005 \002(\r\"J\n\017F2TAddrR"
    "esponse\022\n\n\002ip\030\001 \002(\r\022\014\n\004port\030\002 \002(\r\022\016\n\006res"
    "ult\030\003 \002(\r\022\r\n\005level\030\004 \002(\r\"4\n\026F2TUpdateStr"
    "eamRequest\022\013\n\003cmd\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\")"
    "\n\027F2TUpdateStreamResponse\022\016\n\006result\030\001 \002("
    "\r2\345\001\n\013EchoService\022E\n\010Register\022\033.tracker."
    "F2TRegisterRequest\032\034.tracker.F2TRegister"
    "Response\022<\n\007GetAddr\022\027.tracker.F2TAddrReq"
    "uest\032\030.tracker.F2TAddrResponse\022Q\n\014Update"
    "Stream\022\037.tracker.F2TUpdateStreamRequest\032"
    " .tracker.F2TUpdateStreamResponseB\003\200\001\001", 638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker.proto", &protobuf_RegisterTypes);
  F2TRegisterRequest::default_instance_ = new F2TRegisterRequest();
  F2TRegisterResponse::default_instance_ = new F2TRegisterResponse();
  F2TAddrRequest::default_instance_ = new F2TAddrRequest();
  F2TAddrResponse::default_instance_ = new F2TAddrResponse();
  F2TUpdateStreamRequest::default_instance_ = new F2TUpdateStreamRequest();
  F2TUpdateStreamResponse::default_instance_ = new F2TUpdateStreamResponse();
  F2TRegisterRequest::default_instance_->InitAsDefaultInstance();
  F2TRegisterResponse::default_instance_->InitAsDefaultInstance();
  F2TAddrRequest::default_instance_->InitAsDefaultInstance();
  F2TAddrResponse::default_instance_->InitAsDefaultInstance();
  F2TUpdateStreamRequest::default_instance_->InitAsDefaultInstance();
  F2TUpdateStreamResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_2eproto {
  StaticDescriptorInitializer_tracker_2eproto() {
    protobuf_AddDesc_tracker_2eproto();
  }
} static_descriptor_initializer_tracker_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int F2TRegisterRequest::kIpFieldNumber;
const int F2TRegisterRequest::kPortFieldNumber;
const int F2TRegisterRequest::kAsnFieldNumber;
const int F2TRegisterRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

F2TRegisterRequest::F2TRegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tracker.F2TRegisterRequest)
}

void F2TRegisterRequest::InitAsDefaultInstance() {
}

F2TRegisterRequest::F2TRegisterRequest(const F2TRegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tracker.F2TRegisterRequest)
}

void F2TRegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  asn_ = 0u;
  region_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

F2TRegisterRequest::~F2TRegisterRequest() {
  // @@protoc_insertion_point(destructor:tracker.F2TRegisterRequest)
  SharedDtor();
}

void F2TRegisterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void F2TRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* F2TRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return F2TRegisterRequest_descriptor_;
}

const F2TRegisterRequest& F2TRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

F2TRegisterRequest* F2TRegisterRequest::default_instance_ = NULL;

F2TRegisterRequest* F2TRegisterRequest::New() const {
  return new F2TRegisterRequest;
}

void F2TRegisterRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<F2TRegisterRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, region_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool F2TRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tracker.F2TRegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_asn;
        break;
      }

      // required uint32 asn = 3;
      case 3: {
        if (tag == 24) {
         parse_asn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
          set_has_asn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_region;
        break;
      }

      // required uint32 region = 4;
      case 4: {
        if (tag == 32) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tracker.F2TRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tracker.F2TRegisterRequest)
  return false;
#undef DO_
}

void F2TRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tracker.F2TRegisterRequest)
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint32 asn = 3;
  if (has_asn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->asn(), output);
  }

  // required uint32 region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tracker.F2TRegisterRequest)
}

::google::protobuf::uint8* F2TRegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tracker.F2TRegisterRequest)
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint32 asn = 3;
  if (has_asn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->asn(), target);
  }

  // required uint32 region = 4;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tracker.F2TRegisterRequest)
  return target;
}

int F2TRegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint32 asn = 3;
    if (has_asn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asn());
    }

    // required uint32 region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void F2TRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const F2TRegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const F2TRegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void F2TRegisterRequest::MergeFrom(const F2TRegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_asn()) {
      set_asn(from.asn());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void F2TRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void F2TRegisterRequest::CopyFrom(const F2TRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool F2TRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void F2TRegisterRequest::Swap(F2TRegisterRequest* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(asn_, other->asn_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata F2TRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = F2TRegisterRequest_descriptor_;
  metadata.reflection = F2TRegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int F2TRegisterResponse::kResultFieldNumber;
#endif  // !_MSC_VER

F2TRegisterResponse::F2TRegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tracker.F2TRegisterResponse)
}

void F2TRegisterResponse::InitAsDefaultInstance() {
}

F2TRegisterResponse::F2TRegisterResponse(const F2TRegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tracker.F2TRegisterResponse)
}

void F2TRegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

F2TRegisterResponse::~F2TRegisterResponse() {
  // @@protoc_insertion_point(destructor:tracker.F2TRegisterResponse)
  SharedDtor();
}

void F2TRegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void F2TRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* F2TRegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return F2TRegisterResponse_descriptor_;
}

const F2TRegisterResponse& F2TRegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

F2TRegisterResponse* F2TRegisterResponse::default_instance_ = NULL;

F2TRegisterResponse* F2TRegisterResponse::New() const {
  return new F2TRegisterResponse;
}

void F2TRegisterResponse::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool F2TRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tracker.F2TRegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tracker.F2TRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tracker.F2TRegisterResponse)
  return false;
#undef DO_
}

void F2TRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tracker.F2TRegisterResponse)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tracker.F2TRegisterResponse)
}

::google::protobuf::uint8* F2TRegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tracker.F2TRegisterResponse)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tracker.F2TRegisterResponse)
  return target;
}

int F2TRegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void F2TRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const F2TRegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const F2TRegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void F2TRegisterResponse::MergeFrom(const F2TRegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void F2TRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void F2TRegisterResponse::CopyFrom(const F2TRegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool F2TRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void F2TRegisterResponse::Swap(F2TRegisterResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata F2TRegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = F2TRegisterResponse_descriptor_;
  metadata.reflection = F2TRegisterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int F2TAddrRequest::kIpFieldNumber;
const int F2TAddrRequest::kPortFieldNumber;
const int F2TAddrRequest::kAsnFieldNumber;
const int F2TAddrRequest::kRegionFieldNumber;
const int F2TAddrRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

F2TAddrRequest::F2TAddrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tracker.F2TAddrRequest)
}

void F2TAddrRequest::InitAsDefaultInstance() {
}

F2TAddrRequest::F2TAddrRequest(const F2TAddrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tracker.F2TAddrRequest)
}

void F2TAddrRequest::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  asn_ = 0u;
  region_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

F2TAddrRequest::~F2TAddrRequest() {
  // @@protoc_insertion_point(destructor:tracker.F2TAddrRequest)
  SharedDtor();
}

void F2TAddrRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void F2TAddrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* F2TAddrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return F2TAddrRequest_descriptor_;
}

const F2TAddrRequest& F2TAddrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

F2TAddrRequest* F2TAddrRequest::default_instance_ = NULL;

F2TAddrRequest* F2TAddrRequest::New() const {
  return new F2TAddrRequest;
}

void F2TAddrRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<F2TAddrRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ip_, level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool F2TAddrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tracker.F2TAddrRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_asn;
        break;
      }

      // required uint32 asn = 3;
      case 3: {
        if (tag == 24) {
         parse_asn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
          set_has_asn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_region;
        break;
      }

      // required uint32 region = 4;
      case 4: {
        if (tag == 32) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tracker.F2TAddrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tracker.F2TAddrRequest)
  return false;
#undef DO_
}

void F2TAddrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tracker.F2TAddrRequest)
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint32 asn = 3;
  if (has_asn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->asn(), output);
  }

  // required uint32 region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region(), output);
  }

  // required uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tracker.F2TAddrRequest)
}

::google::protobuf::uint8* F2TAddrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tracker.F2TAddrRequest)
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint32 asn = 3;
  if (has_asn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->asn(), target);
  }

  // required uint32 region = 4;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region(), target);
  }

  // required uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tracker.F2TAddrRequest)
  return target;
}

int F2TAddrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint32 asn = 3;
    if (has_asn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asn());
    }

    // required uint32 region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // required uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void F2TAddrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const F2TAddrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const F2TAddrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void F2TAddrRequest::MergeFrom(const F2TAddrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_asn()) {
      set_asn(from.asn());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void F2TAddrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void F2TAddrRequest::CopyFrom(const F2TAddrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool F2TAddrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void F2TAddrRequest::Swap(F2TAddrRequest* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(asn_, other->asn_);
    std::swap(region_, other->region_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata F2TAddrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = F2TAddrRequest_descriptor_;
  metadata.reflection = F2TAddrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int F2TAddrResponse::kIpFieldNumber;
const int F2TAddrResponse::kPortFieldNumber;
const int F2TAddrResponse::kResultFieldNumber;
const int F2TAddrResponse::kLevelFieldNumber;
#endif  // !_MSC_VER

F2TAddrResponse::F2TAddrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tracker.F2TAddrResponse)
}

void F2TAddrResponse::InitAsDefaultInstance() {
}

F2TAddrResponse::F2TAddrResponse(const F2TAddrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tracker.F2TAddrResponse)
}

void F2TAddrResponse::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  result_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

F2TAddrResponse::~F2TAddrResponse() {
  // @@protoc_insertion_point(destructor:tracker.F2TAddrResponse)
  SharedDtor();
}

void F2TAddrResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void F2TAddrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* F2TAddrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return F2TAddrResponse_descriptor_;
}

const F2TAddrResponse& F2TAddrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

F2TAddrResponse* F2TAddrResponse::default_instance_ = NULL;

F2TAddrResponse* F2TAddrResponse::New() const {
  return new F2TAddrResponse;
}

void F2TAddrResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<F2TAddrResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool F2TAddrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tracker.F2TAddrResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tracker.F2TAddrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tracker.F2TAddrResponse)
  return false;
#undef DO_
}

void F2TAddrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tracker.F2TAddrResponse)
  // required uint32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tracker.F2TAddrResponse)
}

::google::protobuf::uint8* F2TAddrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tracker.F2TAddrResponse)
  // required uint32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tracker.F2TAddrResponse)
  return target;
}

int F2TAddrResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void F2TAddrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const F2TAddrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const F2TAddrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void F2TAddrResponse::MergeFrom(const F2TAddrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void F2TAddrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void F2TAddrResponse::CopyFrom(const F2TAddrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool F2TAddrResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void F2TAddrResponse::Swap(F2TAddrResponse* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(result_, other->result_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata F2TAddrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = F2TAddrResponse_descriptor_;
  metadata.reflection = F2TAddrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int F2TUpdateStreamRequest::kCmdFieldNumber;
const int F2TUpdateStreamRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

F2TUpdateStreamRequest::F2TUpdateStreamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tracker.F2TUpdateStreamRequest)
}

void F2TUpdateStreamRequest::InitAsDefaultInstance() {
}

F2TUpdateStreamRequest::F2TUpdateStreamRequest(const F2TUpdateStreamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tracker.F2TUpdateStreamRequest)
}

void F2TUpdateStreamRequest::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

F2TUpdateStreamRequest::~F2TUpdateStreamRequest() {
  // @@protoc_insertion_point(destructor:tracker.F2TUpdateStreamRequest)
  SharedDtor();
}

void F2TUpdateStreamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void F2TUpdateStreamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* F2TUpdateStreamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return F2TUpdateStreamRequest_descriptor_;
}

const F2TUpdateStreamRequest& F2TUpdateStreamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

F2TUpdateStreamRequest* F2TUpdateStreamRequest::default_instance_ = NULL;

F2TUpdateStreamRequest* F2TUpdateStreamRequest::New() const {
  return new F2TUpdateStreamRequest;
}

void F2TUpdateStreamRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<F2TUpdateStreamRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cmd_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool F2TUpdateStreamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tracker.F2TUpdateStreamRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tracker.F2TUpdateStreamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tracker.F2TUpdateStreamRequest)
  return false;
#undef DO_
}

void F2TUpdateStreamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tracker.F2TUpdateStreamRequest)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tracker.F2TUpdateStreamRequest)
}

::google::protobuf::uint8* F2TUpdateStreamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tracker.F2TUpdateStreamRequest)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tracker.F2TUpdateStreamRequest)
  return target;
}

int F2TUpdateStreamRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void F2TUpdateStreamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const F2TUpdateStreamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const F2TUpdateStreamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void F2TUpdateStreamRequest::MergeFrom(const F2TUpdateStreamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void F2TUpdateStreamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void F2TUpdateStreamRequest::CopyFrom(const F2TUpdateStreamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool F2TUpdateStreamRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void F2TUpdateStreamRequest::Swap(F2TUpdateStreamRequest* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata F2TUpdateStreamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = F2TUpdateStreamRequest_descriptor_;
  metadata.reflection = F2TUpdateStreamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int F2TUpdateStreamResponse::kResultFieldNumber;
#endif  // !_MSC_VER

F2TUpdateStreamResponse::F2TUpdateStreamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tracker.F2TUpdateStreamResponse)
}

void F2TUpdateStreamResponse::InitAsDefaultInstance() {
}

F2TUpdateStreamResponse::F2TUpdateStreamResponse(const F2TUpdateStreamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tracker.F2TUpdateStreamResponse)
}

void F2TUpdateStreamResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

F2TUpdateStreamResponse::~F2TUpdateStreamResponse() {
  // @@protoc_insertion_point(destructor:tracker.F2TUpdateStreamResponse)
  SharedDtor();
}

void F2TUpdateStreamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void F2TUpdateStreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* F2TUpdateStreamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return F2TUpdateStreamResponse_descriptor_;
}

const F2TUpdateStreamResponse& F2TUpdateStreamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

F2TUpdateStreamResponse* F2TUpdateStreamResponse::default_instance_ = NULL;

F2TUpdateStreamResponse* F2TUpdateStreamResponse::New() const {
  return new F2TUpdateStreamResponse;
}

void F2TUpdateStreamResponse::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool F2TUpdateStreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tracker.F2TUpdateStreamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tracker.F2TUpdateStreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tracker.F2TUpdateStreamResponse)
  return false;
#undef DO_
}

void F2TUpdateStreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tracker.F2TUpdateStreamResponse)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tracker.F2TUpdateStreamResponse)
}

::google::protobuf::uint8* F2TUpdateStreamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tracker.F2TUpdateStreamResponse)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tracker.F2TUpdateStreamResponse)
  return target;
}

int F2TUpdateStreamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void F2TUpdateStreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const F2TUpdateStreamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const F2TUpdateStreamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void F2TUpdateStreamResponse::MergeFrom(const F2TUpdateStreamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void F2TUpdateStreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void F2TUpdateStreamResponse::CopyFrom(const F2TUpdateStreamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool F2TUpdateStreamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void F2TUpdateStreamResponse::Swap(F2TUpdateStreamResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata F2TUpdateStreamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = F2TUpdateStreamResponse_descriptor_;
  metadata.reflection = F2TUpdateStreamResponse_reflection_;
  return metadata;
}


// ===================================================================

EchoService::~EchoService() {}

const ::google::protobuf::ServiceDescriptor* EchoService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* EchoService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoService_descriptor_;
}

void EchoService::Register(::google::protobuf::RpcController* controller,
                         const ::tracker::F2TRegisterRequest*,
                         ::tracker::F2TRegisterResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Register() not implemented.");
  done->Run();
}

void EchoService::GetAddr(::google::protobuf::RpcController* controller,
                         const ::tracker::F2TAddrRequest*,
                         ::tracker::F2TAddrResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAddr() not implemented.");
  done->Run();
}

void EchoService::UpdateStream(::google::protobuf::RpcController* controller,
                         const ::tracker::F2TUpdateStreamRequest*,
                         ::tracker::F2TUpdateStreamResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateStream() not implemented.");
  done->Run();
}

void EchoService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), EchoService_descriptor_);
  switch(method->index()) {
    case 0:
      Register(controller,
             ::google::protobuf::down_cast<const ::tracker::F2TRegisterRequest*>(request),
             ::google::protobuf::down_cast< ::tracker::F2TRegisterResponse*>(response),
             done);
      break;
    case 1:
      GetAddr(controller,
             ::google::protobuf::down_cast<const ::tracker::F2TAddrRequest*>(request),
             ::google::protobuf::down_cast< ::tracker::F2TAddrResponse*>(response),
             done);
      break;
    case 2:
      UpdateStream(controller,
             ::google::protobuf::down_cast<const ::tracker::F2TUpdateStreamRequest*>(request),
             ::google::protobuf::down_cast< ::tracker::F2TUpdateStreamResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& EchoService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tracker::F2TRegisterRequest::default_instance();
    case 1:
      return ::tracker::F2TAddrRequest::default_instance();
    case 2:
      return ::tracker::F2TUpdateStreamRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& EchoService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::tracker::F2TRegisterResponse::default_instance();
    case 1:
      return ::tracker::F2TAddrResponse::default_instance();
    case 2:
      return ::tracker::F2TUpdateStreamResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

EchoService_Stub::EchoService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EchoService_Stub::EchoService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
EchoService_Stub::~EchoService_Stub() {
  if (owns_channel_) delete channel_;
}

void EchoService_Stub::Register(::google::protobuf::RpcController* controller,
                              const ::tracker::F2TRegisterRequest* request,
                              ::tracker::F2TRegisterResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void EchoService_Stub::GetAddr(::google::protobuf::RpcController* controller,
                              const ::tracker::F2TAddrRequest* request,
                              ::tracker::F2TAddrResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void EchoService_Stub::UpdateStream(::google::protobuf::RpcController* controller,
                              const ::tracker::F2TUpdateStreamRequest* request,
                              ::tracker::F2TUpdateStreamResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker

// @@protoc_insertion_point(global_scope)
