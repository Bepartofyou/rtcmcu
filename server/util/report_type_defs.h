#ifndef __REPORT_TYPE_DEFS_H_
#define __REPORT_TYPE_DEFS_H_

//report module name
enum ReportModuleName
{
    RPN_FORWARD_CLIENT = 1, //forward client
    RPN_FORWARD_SERVER, //forward server
    RPN_UPLOADER,//uploader
    RPN_PLAYER,//player
    RPN_AVREMUXER//AVRemuxer
};

//report module range
enum ReportModuleRange
{
    RMR_COMMON = 1,
    RMR_COMMON_RESERVED = 1000,

    RMR_FORWARD_CLIENT_BEGIN = 1000,
    RMR_FORWARD_CLIENT_END = 2000,

    RMR_FORWARD_SERVER_BEGIN = 2001,
    RMR_FORWARD_SERVER_END = 3000,

    RMR_UPLOADER_BEGIN = 4001, 
    RMR_UPLOADER_END = 5000,

    RMR_PLAYER_BEGIN = 5001,
    RMR_PLAYER_END = 6000,

    RMR_AVREMUXER_BEGIN = 6001,
    RMR_AVREMUXER_END = 7000

};

//forward client report type
enum ForwardClientReportType
{
    FCRT_FC_BEGIN = RMR_FORWARD_CLIENT_BEGIN,
    FCRT_FC_V1_STAT, // rename from FORWARD_STAT
    FCRT_FC_V1_START, // rename from EVENT_STREAM_START = 1
    FCRT_FC_V1_ADDR_GOT, // rename from EVENT_STREAM_ADDR_GOT = 2
    FCRT_FC_V1_HEADER, // rename from EVENT_STREAM_HEADER = 3
    FCRT_FC_V1_DATA, // rename from EVENT_STREAM_DATA = 4
    FCRT_FC_V1_TIMEOUT, // rename from EVENT_STREAM_TIMEOUT = 5
    FCRT_FC_V1_STOP, // rename from EVENT_STREAM_STOP = 6

    FCRT_FC_V2_STAT = RMR_FORWARD_CLIENT_BEGIN + 100,
    FCRT_FC_V2_START,
    FCRT_FC_V2_ADDR_GOT,
    FCRT_FC_V2_FIRST_BLOCK,
    FCRT_FC_V2_TIMEOUT,
    FCRT_FC_V2_STOP,

    FCRT_FCRTP_STAT = RMR_FORWARD_CLIENT_BEGIN + 200,
    FCRT_FCRTP_STREAM_STAT, 
    FCRT_FCRTP_TRANS_TIMEOUT, 
    FCRT_FCRTP_TRANS_DESTROY, 
    FCRT_FCRTP_TRANS_STAT,
    FCRT_FCRTP_START, 
    FCRT_FCRTP_ADDR_GOT,
    FCRT_FCRTP_SEND_F2FCMD,
    FCRT_FCRTP_FIRST_BLOCK_SEND,
    FCRT_FCRTP_FIRST_BLOCK_RECV,
    FCRT_FCRTP_TIMEOUT,
    FCRT_FCRTP_STOP,

    FCRT_IN_DISP_FLUX,

    FCRT_FC_END = RMR_FORWARD_CLIENT_END
};

//forward server report type
enum ForwardServerReportType
{
    FSRT_FS_BEGIN = RMR_FORWARD_SERVER_BEGIN,
    FSRT_FS_V1_STAT,
    FSRT_FS_V1_REGISTER,
    FSRT_FS_V1_UPDATE,
    FSRT_FS_V1_ACCEPT,
    FSRT_FS_V1_START,
    FSRT_FS_V1_FIRST_BLOCK,
    FSRT_FS_V1_TIMEOUT,
    FSRT_FS_V1_STOP,

    FSRT_FS_V2_STAT = RMR_FORWARD_SERVER_BEGIN + 100,
    FSRT_FS_V2_REGISTER,
    FSRT_FS_V2_UPDATE,
    FSRT_FS_V2_START,
    FSRT_FS_V2_FIRST_BLOCK,
    FSRT_FS_V2_TIMEOUT,
    FSRT_FS_V2_STOP,

    FSRT_FSRTP_STAT = RMR_FORWARD_SERVER_BEGIN + 200,
    FSRT_FSRTP_STREAM_STAT,
    FSRT_FSRTP_START,
    FSRT_FSRTP_SEND_F2FCMD,
    FSRT_FSRTP_FIRST_BLOCK_SEND,
    FSRT_FSRTP_FIRST_BLOCK_RECV,
    FSRT_FSRTP_TIMEOUT,
    FSRT_FSRTP_STOP,
    FSRT_FSRTP_TRANS_TIMEOUT,
    FSRT_FSRTP_TRANS_DESTROY,
    FSRT_FSRTP_TRANS_STAT,

    FSRT_IN_DISP_FLUX,

    FSRT_FS_END = RMR_FORWARD_SERVER_END
};

//uploader report type
enum UploaderReportType
{
    URT_BEGIN = RMR_UPLOADER_BEGIN,
    URT_FLV_BLOCK_CNT,
    URT_FLV_STREAM,
    URT_RTP_STREAM,
    URT_RTP_SDP_STREAM,
    URT_FLV_RECV_BYTE_BY_MIN,
    URT_RTP_RECV_BYTE_BY_MIN,
    URT_RTP_SDP_RECV_BYTE_BY_MIN,
    URT_RTP_FLUENCE,

    URT_IN_DISP_FLUX,

    URT_END = RMR_UPLOADER_END
};

//player report type
enum PlayerReportType
{
    PRT_BEGIN = RMR_PLAYER_BEGIN,
    PRT_FLV_STREAM,
    PRT_RTP_STREAM,
    PRT_RTP_SDP_STREAM,
    PRT_HLS_TS_STREAM,
    PRT_HLS_M3U8_STREAM,
    PRT_FLV_SEND_BYTE_BY_MIN,
    PRT_RTP_SEND_BYTE_BY_MIN,
    PRT_RTP_SDP_SEND_BYTE_BY_MIN,
    PRT_HLS_TS_SEND_BYTE_BY_MIN,
    PRT_HLS_M3U8_SEND_BYTE_BY_MIN,
    PRT_RTP_FLUENCE,
    
    PRT_IN_DISP_FLUX,

    PRT_END = RMR_PLAYER_END
};

//Remuxer report type
enum AVRemuxerReportType
{
    ART_BEGIN = RMR_AVREMUXER_BEGIN,
    ART_AVDEMUXER_START,
    ART_AVMUXER_START,
    ART_AVDEMUXER_COUNTER,
    ART_AVMUXER_COUNTER,

    ART_END = RMR_AVREMUXER_END
};

#endif//__REPORT_TYPE_DEFS_H_

